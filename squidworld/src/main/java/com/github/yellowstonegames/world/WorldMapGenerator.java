package com.github.yellowstonegames.world;

import com.github.tommyettinger.ds.IntList;
import com.github.tommyettinger.ds.support.LaserRandom;
import com.github.yellowstonegames.core.ArrayTools;
import com.github.yellowstonegames.core.MathTools;
import com.github.yellowstonegames.core.TrigTools;
import com.github.yellowstonegames.grid.Coord;
import com.github.yellowstonegames.grid.Noise;
import com.github.yellowstonegames.grid.Region;

import java.io.Serializable;
import java.util.Arrays;

/**
 * Can be used to generate world maps with a wide variety of data, starting with height, temperature and moisture.
 * To generate maps, this uses two {@code long} variables for its state, and if you use the same kind of {@link Noise}
 * configuration with the same state, you will get the same world as a result. Calling
 * {@link #generate(float, float, long, long)} also allows setting the land modifier and heat modifier to make worlds
 * that have more or less ocean vs. land and/or ice vs. desert.
 * <br>
 * There's lots of implementations here for different usage. The maps this produces with {@link StretchWorldMap} are
 * valid for stretching around spheres, while the maps from {@link TilingWorldMap} are for toroidal world projections
 * and will wrap from edge to opposite edge seamlessly thanks to
 * <a href="https://www.gamedev.net/blog/33/entry-2138456-seamless-noise/">a technique from the Accidental Noise
 * Library</a> that involves getting a 2D slice of 4D continuous noise, such as Simplex. Because of how continuous noise
 * works, this also allows extremely high zoom levels for all types of map as long as certain parameters are within
 * reason. Other world maps produce more conventional shapes; {@link SpaceViewMap} and {@link RotatingSpaceMap} make a
 * view of a marble-like world from space, and others make more unconventional shapes, like {@link EllipticalWorldMap},
 * which forms a 2:1 ellipse shape that accurately keeps sizes but not relative shapes, {@link RoundSideMap}, which
 * forms a pill-shape, and {@link HyperellipticalMap}, which takes parameters so it can fit
 * any shape between a circle or ellipse and a rectangle (the default is a slightly squared-off ellipse). You can access
 * the height map with the {@link #heightData} field, the heat map with the {@link #heatData} field, the moisture map
 * with the {@link #moistureData} field, and a special map that stores ints representing the codes for various ranges of
 * elevation (0 to 8 inclusive, with 0 the deepest ocean and 8 the highest mountains) with {@link #heightCodeData}. The
 * last map should be noted as being the simplest way to find what is land and what is water; any height code 4 or
 * greater is land, and any height code 3 or less is water.
 * <br>
 * This interacts closely with {@link BiomeMapper}, and BiomeMapper can't create a map of what types of ecosystem are
 * present without first having a world generated by a WorldMapGenerator.
 */
public abstract class WorldMapGenerator implements Serializable {
    private static final long serialVersionUID = 1L;
    public final int width, height;
    public long seedA;
    public long seedB;
    public long cacheA;
    public long cacheB;
    public LaserRandom rng;
    public final float[][] heightData, heatData, moistureData;
    public final Region landData;
    public final int[][] heightCodeData;
    public float landModifier = -1f, heatModifier = 1f,
            minHeight = Float.POSITIVE_INFINITY, maxHeight = Float.NEGATIVE_INFINITY,
            minHeightActual = Float.POSITIVE_INFINITY, maxHeightActual = Float.NEGATIVE_INFINITY,
            minHeat = Float.POSITIVE_INFINITY, maxHeat = Float.NEGATIVE_INFINITY,
            minWet = Float.POSITIVE_INFINITY, maxWet = Float.NEGATIVE_INFINITY;
    protected float centerLongitude;

    public int zoom, startX, startY, usedWidth, usedHeight;
    protected IntList startCacheX = new IntList(8), startCacheY = new IntList(8);
    protected int zoomStartX, zoomStartY;

    /**
     * A Noise that has a higher frequency than that class defaults to, which is useful for maps here. With the
     * default Noise frequency of 1f/32f, the maps this produces are giant blurs.
     * <br>
     * Even though this is a Noise and so technically can be edited, that seems to have issues when there's more
     * than one WorldMapGenerator that uses this field. So you can feel free to use this as a Noise when
     * generators need one, but don't change it too much, if at all.
     */
    public static final Noise DEFAULT_NOISE = new Noise(0x1337CAFE, 1f, Noise.HONEY_FRACTAL, 1);

    /**
     * Used to implement most of the copy constructor for subclasses; this cannot copy Noise implementations and leaves
     * that up to the subclass, but will copy all non-static fields defined in WorldMapGenerator from other.
     * @param other a WorldMapGenerator (subclass) to copy fields from
     */
    protected WorldMapGenerator(WorldMapGenerator other) {
        width = other.width;
        height = other.height;
        usedWidth = other.usedWidth;
        usedHeight = other.usedHeight;
        landModifier = other.landModifier;
        heatModifier = other.heatModifier;
        minHeat = other.minHeat;
        maxHeat = other.maxHeat;
        minHeight = other.minHeight;
        maxHeight = other.maxHeight;
        minHeightActual = other.minHeightActual;
        maxHeightActual = other.maxHeightActual;
        minWet = other.minWet;
        maxWet = other.maxWet;
        centerLongitude = other.centerLongitude;
        zoom = other.zoom;
        startX = other.startX;
        startY = other.startY;
        startCacheX.addAll(other.startCacheX);
        startCacheY.addAll(other.startCacheY);
        zoomStartX = other.zoomStartX;
        zoomStartY = other.zoomStartY;
        seedA = other.seedA;
        seedB = other.seedB;
        cacheA = other.cacheA;
        cacheB = other.cacheB;
        rng = other.rng.copy();
        heightData = ArrayTools.copy(other.heightData);
        heatData = ArrayTools.copy(other.heatData);
        moistureData = ArrayTools.copy(other.moistureData);
        landData = other.landData.copy();
        heightCodeData = ArrayTools.copy(other.heightCodeData);
    }

    /**
     * Gets the longitude line the map is centered on, which should usually be between 0 and 2 * PI.
     * @return the longitude line the map is centered on, in radians from 0 to 2 * PI
     */
    public float getCenterLongitude() {
        return centerLongitude;
    }

    /**
     * Sets the center longitude line to a longitude measured in radians, from 0 to 2 * PI. Positive arguments will be
     * corrected with modulo, but negative ones may not always act as expected, and are strongly discouraged.
     * @param centerLongitude the longitude to center the map projection on, from 0 to 2 * PI (can be any non-negative float).
     */
    public void setCenterLongitude(float centerLongitude) {
        this.centerLongitude = centerLongitude % 6.283185307179586f;
    }

    public static final float
            deepWaterLower = -1f, deepWaterUpper = -0.7f,        // 0
            mediumWaterLower = -0.7f, mediumWaterUpper = -0.3f,    // 1
            shallowWaterLower = -0.3f, shallowWaterUpper = -0.1f,  // 2
            coastalWaterLower = -0.1f, coastalWaterUpper = 0.02f,   // 3
            sandLower = 0.02f, sandUpper = 0.12f,                   // 4
            grassLower = 0.14f, grassUpper = 0.35f,                // 5
            forestLower = 0.35f, forestUpper = 0.6f,               // 6
            rockLower = 0.6f, rockUpper = 0.8f,                    // 7
            snowLower = 0.8f, snowUpper = 1f;                    // 8

    protected static float removeExcess(float radians)
    {
        radians *= 0.6366197723675814f;
        final int floor = (radians >= 0f ? (int) radians : (int) radians - 1);
        return (radians - (floor & -2) - ((floor & 1) << 1)) * TrigTools.PI;
    }
    /**
     * Constructs a WorldMapGenerator (this class is abstract, so you should typically call this from a subclass or as
     * part of an anonymous class that implements {@link #regenerate(int, int, int, int, float, float, long, long)}).
     * Always makes a 256x256 map. If you were using {@link WorldMapGenerator#WorldMapGenerator(long, int, int)}, then
     * this would be the same as passing the parameters {@code 0x1337BABE1337D00DL, 256, 256}.
     */
    protected WorldMapGenerator()
    {
        this(0x1337BABE1337D00DL, 256, 256);
    }
    /**
     * Constructs a WorldMapGenerator (this class is abstract, so you should typically call this from a subclass or as
     * part of an anonymous class that implements {@link #regenerate(int, int, int, int, float, float, long, long)}).
     * Takes only the width/height of the map. The initial seed is set to the same large long
     * every time, and it's likely that you would set the seed when you call {@link #generate(long, long)}. The width and
     * height of the map cannot be changed after the fact, but you can zoom in.
     *
     * @param mapWidth the width of the map(s) to generate; cannot be changed later
     * @param mapHeight the height of the map(s) to generate; cannot be changed later
     */
    protected WorldMapGenerator(int mapWidth, int mapHeight)
    {
        this(0x1337BABE1337D00DL, mapWidth, mapHeight);
    }
    /**
     * Constructs a WorldMapGenerator (this class is abstract, so you should typically call this from a subclass or as
     * part of an anonymous class that implements {@link #regenerate(int, int, int, int, float, float, long, long)}).
     * Takes an initial seed and the width/height of the map. The {@code initialSeed}
     * parameter may or may not be used, since you can specify the seed to use when you call {@link #generate(long, long)}.
     * The width and height of the map cannot be changed after the fact, but you can zoom in.
     *
     * @param initialSeed the seed for the LaserRandom this uses; this may also be set per-call to generate
     * @param mapWidth the width of the map(s) to generate; cannot be changed later
     * @param mapHeight the height of the map(s) to generate; cannot be changed later
     */
    protected WorldMapGenerator(long initialSeed, int mapWidth, int mapHeight)
    {
        width = mapWidth;
        height = mapHeight;
        usedWidth = width;
        usedHeight = height;
        seedA = initialSeed;
        seedB = initialSeed + 0xC6BC279692B5C323L | 1L;
        cacheA = ~seedA;
        cacheB = ~seedB;
        rng = new LaserRandom(seedA, seedB);
        heightData = new float[width][height];
        heatData = new float[width][height];
        moistureData = new float[width][height];
        landData = new Region(width, height);
        heightCodeData = new int[width][height];

//        riverData = new Region(width, height);
//        lakeData = new Region(width, height);
//        partialRiverData = new Region(width, height);
//        partialLakeData = new Region(width, height);
//        workingData = new Region(width, height);
    }

    /**
     * Generates a world using a random RNG state and all parameters randomized.
     * The worlds this produces will always have width and height as specified in the constructor (default 256x256).
     * You can call {@link #zoomIn(int, int, int)} to float the resolution and center on the specified area, but the width
     * and height of the 2D arrays this changed, such as {@link #heightData} and {@link #moistureData} will be the same.
     */
    public void generate()
    {
        generate(rng.nextLong(), rng.nextLong() | 1L);
    }

    /**
     * Generates a world using the specified RNG state as a long. Other parameters will be randomized, using the same
     * RNG state to start with.
     * The worlds this produces will always have width and height as specified in the constructor (default 256x256).
     * You can call {@link #zoomIn(int, int, int)} to float the resolution and center on the specified area, but the width
     * and height of the 2D arrays this changed, such as {@link #heightData} and {@link #moistureData} will be the same.
     * @param stateA the first part of state to give this generator's RNG; if the whole state is the same as the last call, this will reuse data
     * @param stateB the second part of state to give this generator's RNG; if the whole state is the same as the last call, this will reuse data
     */
    public void generate(long stateA, long stateB) {
        generate(-1f, -1f, stateA, stateB | 1L);
    }

    /**
     * Generates a world using the specified RNG state as a long, with specific land and heat modifiers that affect
     * the land-water ratio and the average temperature, respectively.
     * The worlds this produces will always have width and height as specified in the constructor (default 256x256).
     * You can call {@link #zoomIn(int, int, int)} to float the resolution and center on the specified area, but the width
     * and height of the 2D arrays this changed, such as {@link #heightData} and {@link #moistureData} will be the same.
     * @param landMod 1f is Earth-like, less than 1 is more-water, more than 1 is more-land; a random value will be used if this is negative
     * @param heatMod 1.125f is Earth-like, less than 1 is cooler, more than 1 is hotter; a random value will be used if this is negative
     * @param stateA the first part of state to give this generator's RNG; if the whole state is the same as the last call, this will reuse data
     * @param stateB the second part of state to give this generator's RNG; if the whole state is the same as the last call, this will reuse data
     */
    public void generate(float landMod, float heatMod, long stateA, long stateB)
    {
        if(cacheA != stateA || cacheB != (stateB | 1L) ||
                landMod != landModifier || heatMod != heatModifier)
        {
            seedA = stateA;
            seedB = stateB | 1L;
            zoom = 0;
            startCacheX.clear();
            startCacheY.clear();
            startCacheX.add(0);
            startCacheY.add(0);
            zoomStartX = width >> 1;
            zoomStartY = height >> 1;

        }
        //System.out.printf("generate, zoomStartX: %d, zoomStartY: %d\n", zoomStartX, zoomStartY);

        regenerate(startX = (zoomStartX >> zoom) - (width >> 1 + zoom), startY = (zoomStartY >> zoom) - (height >> 1 + zoom),
                //startCacheX.peek(), startCacheY.peek(),
                usedWidth = (width >> zoom), usedHeight = (height >> zoom), landMod, heatMod, seedA, seedB);
    }

    /**
     * Halves the resolution of the map and floats the area it covers; the 2D arrays this uses keep their sizes. This
     * version of zoomOut always zooms out from the center of the currently used area.
     * <br>
     * Only has an effect if you have previously zoomed in using {@link #zoomIn(int, int, int)} or its overload.
     */
    public void zoomOut()
    {
        zoomOut(1, width >> 1, height >> 1);
    }
    /**
     * Halves the resolution of the map and floats the area it covers repeatedly, halving {@code zoomAmount} times; the
     * 2D arrays this uses keep their sizes. This version of zoomOut allows you to specify where the zoom should be
     * centered, using the current coordinates (if the map size is 256x256, then coordinates should be between 0 and
     * 255, and will refer to the currently used area and not necessarily the full world size).
     * <br>
     * Only has an effect if you have previously zoomed in using {@link #zoomIn(int, int, int)} or its overload.
     * @param zoomCenterX the center X position to zoom out from; if too close to an edge, this will stop moving before it would extend past an edge
     * @param zoomCenterY the center Y position to zoom out from; if too close to an edge, this will stop moving before it would extend past an edge
     */
    public void zoomOut(int zoomAmount, int zoomCenterX, int zoomCenterY)
    {
        zoomAmount = Math.min(zoom, zoomAmount);
        if(zoomAmount == 0) return;
        if(zoomAmount < 0) {
            zoomIn(-zoomAmount, zoomCenterX, zoomCenterY);
            return;
        }
        if(zoom > 0)
        {
            if(cacheA != seedA || cacheB != seedB)
            {
                generate(rng.nextLong(), rng.nextLong() | 1L);
            }
            zoomStartX = Math.min(Math.max(
                    (zoomStartX + (zoomCenterX - (width >> 1))) >> zoomAmount,
                    width >> 1), (width << zoom - zoomAmount) - (width >> 1));
            zoomStartY = Math.min(Math.max(
                    (zoomStartY + (zoomCenterY - (height >> 1))) >> zoomAmount,
                    height >> 1), (height << zoom - zoomAmount) - (height >> 1));
//            System.out.printf("zoomOut, zoomStartX: %d, zoomStartY: %d\n", zoomStartX, zoomStartY);
            zoom -= zoomAmount;
            startCacheX.pop();
            startCacheY.pop();
            startCacheX.add(Math.min(Math.max(startCacheX.pop() + (zoomCenterX >> zoom + 1) - (width >> zoom + 2),
                    0), width - (width >> zoom)));
            startCacheY.add(Math.min(Math.max(startCacheY.pop() + (zoomCenterY >> zoom + 1) - (height >> zoom + 2),
                    0), height - (height >> zoom)));
//            zoomStartX = Math.min(Math.max((zoomStartX >> 1) + (zoomCenterX >> zoom + 1) - (width >> zoom + 2),
//                    0), width - (width >> zoom));
//            zoomStartY = Math.min(Math.max((zoomStartY >> 1) + (zoomCenterY >> zoom + 1) - (height >> zoom + 2),
//                    0), height - (height >> zoom));
            regenerate(startX = (zoomStartX >> zoom) - (width >> zoom + 1), startY = (zoomStartY >> zoom) - (height >> zoom + 1),
                    //startCacheX.peek(), startCacheY.peek(),
                    usedWidth = width >> zoom,  usedHeight = height >> zoom,
                    landModifier, heatModifier, cacheA, cacheB);
            rng.setState(cacheA, cacheB);
        }

    }
    /**
     * Floats the resolution of the map and halves the area it covers; the 2D arrays this uses keep their sizes. This
     * version of zoomIn always zooms in to the center of the currently used area.
     * <br>
     * Although there is no technical restriction on maximum zoom, zooming in more than 5 times (64x scale or greater)
     * will make the map appear somewhat less realistic due to rounded shapes appearing more bubble-like and less like a
     * normal landscape.
     */
    public void zoomIn()
    {
        zoomIn(1, width >> 1, height >> 1);
    }
    /**
     * Floats the resolution of the map and halves the area it covers repeatedly, doubling {@code zoomAmount} times;
     * the 2D arrays this uses keep their sizes. This version of zoomIn allows you to specify where the zoom should be
     * centered, using the current coordinates (if the map size is 256x256, then coordinates should be between 0 and
     * 255, and will refer to the currently used area and not necessarily the full world size).
     * <br>
     * Although there is no technical restriction on maximum zoom, zooming in more than 5 times (64x scale or greater)
     * will make the map appear somewhat less realistic due to rounded shapes appearing more bubble-like and less like a
     * normal landscape.
     * @param zoomCenterX the center X position to zoom in to; if too close to an edge, this will stop moving before it would extend past an edge
     * @param zoomCenterY the center Y position to zoom in to; if too close to an edge, this will stop moving before it would extend past an edge
     */
    public void zoomIn(int zoomAmount, int zoomCenterX, int zoomCenterY)
    {
        if(zoomAmount == 0) return;
        if(zoomAmount < 0)
        {
            zoomOut(-zoomAmount, zoomCenterX, zoomCenterY);
            return;
        }
        if(seedA != cacheA || seedB != cacheB)
        {
            generate(rng.nextLong(), rng.nextLong() | 1L);
        }
        zoomStartX = Math.min(Math.max(
                (zoomStartX + zoomCenterX - (width >> 1) << zoomAmount),
                width >> 1), (width << zoom + zoomAmount) - (width >> 1));
//        int oldZoomY = zoomStartY;
        zoomStartY = Math.min(Math.max(
                (zoomStartY + zoomCenterY - (height >> 1) << zoomAmount),
                height >> 1), (height << zoom + zoomAmount) - (height >> 1));
//        System.out.printf("zoomIn, zoomStartX: %d, zoomStartY: %d, oldZoomY: %d, unedited: %d, upperCap: %d\n", zoomStartX, zoomStartY,
//                oldZoomY, (oldZoomY + zoomCenterY - (height >> 1) << zoomAmount), (height << zoom + zoomAmount) - (height >> 1));
        zoom += zoomAmount;
        if(startCacheX.isEmpty())
        {
            startCacheX.add(0);
            startCacheY.add(0);
        }
        else {
            startCacheX.add(Math.min(Math.max(startCacheX.peek() + (zoomCenterX >> zoom - 1) - (width >> zoom + 1),
                    0), width - (width >> zoom)));
            startCacheY.add(Math.min(Math.max(startCacheY.peek() + (zoomCenterY >> zoom - 1) - (height >> zoom + 1),
                    0), height - (height >> zoom)));
        }
        regenerate(startX = (zoomStartX >> zoom) - (width >> 1 + zoom), startY = (zoomStartY >> zoom) - (height >> 1 + zoom),
                //startCacheX.peek(), startCacheY.peek(),
                usedWidth = width >> zoom, usedHeight = height >> zoom,
                landModifier, heatModifier, cacheA, cacheB);
        rng.setState(cacheA, cacheB);
    }

    protected abstract void regenerate(int startX, int startY, int usedWidth, int usedHeight,
                                       float landMod, float heatMod, long stateA, long stateB);
    /**
     * Given a latitude and longitude in radians (the conventional way of describing points on a globe), this gets the
     * (x,y) Coord on the map projection this generator uses that corresponds to the given lat-lon coordinates. If this
     * generator does not represent a globe (if it is toroidal, for instance) or if there is no "good way" to calculate
     * the projection for a given lat-lon coordinate, this returns null. The default implementation always returns null.
     * If this is a supported operation and the parameters are valid, this returns a Coord with x between 0 and
     * {@link #width}, and y between 0 and {@link #height}, both exclusive. Automatically wraps the Coord's values using
     * {@link #wrapX(int, int)} and {@link #wrapY(int, int)}.
     * @param latitude the latitude, from {@code -TrigTools.HALF_PI} to {@code TrigTools.HALF_PI}
     * @param longitude the longitude, from {@code 0f} to {@code TrigTools.PI2}
     * @return the point at the given latitude and longitude, as a Coord with x between 0 and {@link #width} and y between 0 and {@link #height}, or null if unsupported
     */
    public Coord project(float latitude, float longitude)
    {
        return null;
    }

    public int codeHeight(final float high)
    {
        if(high < deepWaterUpper)
            return 0;
        if(high < mediumWaterUpper)
            return 1;
        if(high < shallowWaterUpper)
            return 2;
        if(high < coastalWaterUpper)
            return 3;
        if(high < sandUpper)
            return 4;
        if(high < grassUpper)
            return 5;
        if(high < forestUpper)
            return 6;
        if(high < rockUpper)
            return 7;
        return 8;
    }
    public int wrapX(final int x, final int y)  {
        return (x + width) % width;
    }
    public int wrapY(final int x, final int y)  {
        return (y + height) % height;
    }

    /**
     * A concrete implementation of {@link WorldMapGenerator} that imitates an infinite-distance perspective view of a
     * world, showing only one hemisphere, that should be as wide as it is tall (its outline is a circle). This uses an
     * <a href="https://en.wikipedia.org/wiki/Orthographic_projection_in_cartography">Orthographic projection</a> with
     * the latitude always at the equator. If you want to rotate a globe in real-time, consider {@link RotatingSpaceMap}
     * instead; rotating a SpaceViewMap can be done with {@link #setCenterLongitude(float)}, but it is somewhat slow.
     * <a href="http://yellowstonegames.github.io/SquidLib/SpaceViewMap.png" >Example map, showing circular shape as if
     * viewed from afar</a>
     */
    public static class SpaceViewMap extends WorldMapGenerator {
        private static final long serialVersionUID = 1L;
        protected static final float terrainFreq = 1.45f, terrainLayeredFreq = 2.6f, heatFreq = 2.1f, moistureFreq = 2.125f, otherFreq = 3.375f;
        protected float minHeat0 = Float.POSITIVE_INFINITY, maxHeat0 = Float.NEGATIVE_INFINITY,
                minHeat1 = Float.POSITIVE_INFINITY, maxHeat1 = Float.NEGATIVE_INFINITY,
                minWet0 = Float.POSITIVE_INFINITY, maxWet0 = Float.NEGATIVE_INFINITY;

        public final Noise terrain, heat, moisture, otherRidged, terrainLayered;
        public final float[][] xPositions,
                yPositions,
                zPositions;
        protected final int[] edges;

        /**
         * Constructs a concrete WorldMapGenerator for a map that can be used to view a spherical world from space,
         * showing only one hemisphere at a time.
         * Always makes a 100x100 map.
         * Uses Noise as its noise generator, with 1f as the octave multiplier affecting detail.
         * If you were using {@link SpaceViewMap#SpaceViewMap(long, int, int, Noise, float)}, then this would be the
         * same as passing the parameters {@code 0x1337BABE1337D00DL, 100, 100, DEFAULT_NOISE, 1f}.
         */
        public SpaceViewMap() {
            this(0x1337BABE1337D00DL, 100, 100, DEFAULT_NOISE, 1f);
        }

        /**
         * Constructs a concrete WorldMapGenerator for a map that can be used to view a spherical world from space,
         * showing only one hemisphere at a time.
         * Takes only the width/height of the map. The initial seed is set to the same large long
         * every time, and it's likely that you would set the seed when you call {@link #generate(long, long)}. The width and
         * height of the map cannot be changed after the fact, but you can zoom in.
         * Uses Noise as its noise generator, with 1f as the octave multiplier affecting detail.
         *
         * @param mapWidth  the width of the map(s) to generate; cannot be changed later
         * @param mapHeight the height of the map(s) to generate; cannot be changed later
         */
        public SpaceViewMap(int mapWidth, int mapHeight) {
            this(0x1337BABE1337D00DL, mapWidth, mapHeight,  DEFAULT_NOISE,1f);
        }

        /**
         * Constructs a concrete WorldMapGenerator for a map that can be used to view a spherical world from space,
         * showing only one hemisphere at a time.
         * Takes an initial seed and the width/height of the map. The {@code initialSeed}
         * parameter may or may not be used, since you can specify the seed to use when you call {@link #generate(long, long)}.
         * The width and height of the map cannot be changed after the fact, but you can zoom in.
         * Uses Noise as its noise generator, with 1f as the octave multiplier affecting detail.
         *
         * @param initialSeed the seed for the LaserRandom this uses; this may also be set per-call to generate
         * @param mapWidth    the width of the map(s) to generate; cannot be changed later
         * @param mapHeight   the height of the map(s) to generate; cannot be changed later
         */
        public SpaceViewMap(long initialSeed, int mapWidth, int mapHeight) {
            this(initialSeed, mapWidth, mapHeight, DEFAULT_NOISE, 1f);
        }

        /**
         * Constructs a concrete WorldMapGenerator for a map that can be used to view a spherical world from space,
         * showing only one hemisphere at a time.
         * Takes an initial seed and the width/height of the map. The {@code initialSeed}
         * parameter may or may not be used, since you can specify the seed to use when you call {@link #generate(long, long)}.
         * The width and height of the map cannot be changed after the fact, but you can zoom in.
         * Uses Noise as its noise generator, with the given octave multiplier affecting detail.
         *
         * @param initialSeed the seed for the LaserRandom this uses; this may also be set per-call to generate
         * @param mapWidth    the width of the map(s) to generate; cannot be changed later
         * @param mapHeight   the height of the map(s) to generate; cannot be changed later
         * @param octaveMultiplier used to adjust the level of detail, with 0.5f at the bare-minimum detail and 1f normal
         */
        public SpaceViewMap(long initialSeed, int mapWidth, int mapHeight, float octaveMultiplier) {
            this(initialSeed, mapWidth, mapHeight, DEFAULT_NOISE, octaveMultiplier);
        }

        /**
         * Constructs a concrete WorldMapGenerator for a map that can be used to view a spherical world from space,
         * showing only one hemisphere at a time.
         * Takes an initial seed and the width/height of the map. The {@code initialSeed}
         * parameter may or may not be used, since you can specify the seed to use when you call {@link #generate(long, long)}.
         * The width and height of the map cannot be changed after the fact, but you can zoom in.
         * Uses the given noise generator, with 1f as the octave multiplier affecting detail.
         *
         * @param initialSeed the seed for the LaserRandom this uses; this may also be set per-call to generate
         * @param mapWidth    the width of the map(s) to generate; cannot be changed later
         * @param mapHeight   the height of the map(s) to generate; cannot be changed later
         * @param noiseGenerator an instance of a noise generator capable of 3D noise, usually {@link Noise}
         */
        public SpaceViewMap(long initialSeed, int mapWidth, int mapHeight, Noise noiseGenerator) {
            this(initialSeed, mapWidth, mapHeight, noiseGenerator, 1f);
        }

        /**
         * Constructs a concrete WorldMapGenerator for a map that can be used to view a spherical world from space,
         * showing only one hemisphere at a time.
         * Takes an initial seed, the width/height of the map, and parameters for noise
         * generation (a {@link Noise} implementation, which is usually {@link Noise#instance}, and a
         * multiplier on how many octaves of noise to use, with 1f being normal (high) detail and higher multipliers
         * producing even more detailed noise when zoomed-in). The {@code initialSeed} parameter may or may not be used,
         * since you can specify the seed to use when you call {@link #generate(long, long)}. The width and height of the map
         * cannot be changed after the fact, but you can zoom in. Noise will be the fastest 3D generator to use for
         * {@code noiseGenerator}, and the seed it's constructed with doesn't matter because this will change the
         * seed several times at different scales of noise (it's fine to use the static {@link Noise#instance}
         * because it has no changing state between runs of the program). The {@code octaveMultiplier} parameter should
         * probably be no lower than 0.5f, but can be arbitrarily high if you're willing to spend much more time on
         * generating detail only noticeable at very high zoom; normally 1f is fine and may even be too high for maps
         * that don't require zooming.
         * @param initialSeed the seed for the LaserRandom this uses; this may also be set per-call to generate
         * @param mapWidth the width of the map(s) to generate; cannot be changed later
         * @param mapHeight the height of the map(s) to generate; cannot be changed later
         * @param noiseGenerator an instance of a noise generator capable of 3D noise, usually {@link Noise}
         * @param octaveMultiplier used to adjust the level of detail, with 0.5f at the bare-minimum detail and 1f normal
         */
        public SpaceViewMap(long initialSeed, int mapWidth, int mapHeight, Noise noiseGenerator, float octaveMultiplier) {
            super(initialSeed, mapWidth, mapHeight);
            xPositions = new float[width][height];
            yPositions = new float[width][height];
            zPositions = new float[width][height];
            edges = new int[height << 1];

            terrain = new Noise(noiseGenerator); terrain.setFrequency(terrain.getFrequency() * terrainFreq);
            terrain.setNoiseType(terrain.getNoiseType() | 1); terrain.setFractalOctaves((int)(0.5f + octaveMultiplier * 10));
            terrain.setFractalType(Noise.RIDGED_MULTI);

            terrainLayered = new Noise(noiseGenerator); terrainLayered.setFrequency(terrainLayered.getFrequency() * terrainLayeredFreq * 0.325f);
            terrainLayered.setNoiseType(terrainLayered.getNoiseType() | 1); terrainLayered.setFractalOctaves((int)(0.5f + octaveMultiplier * 8));

            heat = new Noise(noiseGenerator); heat.setFrequency(heat.getFrequency() * heatFreq);
            heat.setNoiseType(heat.getNoiseType() | 1); heat.setFractalOctaves((int)(0.5f + octaveMultiplier * 3));

            moisture = new Noise(noiseGenerator); moisture.setFrequency(moisture.getFrequency() * moistureFreq);
            moisture.setNoiseType(moisture.getNoiseType() | 1); moisture.setFractalOctaves((int)(0.5f + octaveMultiplier * 4));

            otherRidged = new Noise(noiseGenerator); otherRidged.setFrequency(otherRidged.getFrequency() * otherFreq);
            otherRidged.setNoiseType(otherRidged.getNoiseType() | 1); otherRidged.setFractalOctaves((int)(0.5f + octaveMultiplier * 6));
            otherRidged.setFractalType(Noise.RIDGED_MULTI);
        }

        /**
         * Copies the SpaceViewMap {@code other} to construct a new one that is exactly the same. References will only
         * be shared to Noise classes.
         * @param other a SpaceViewMap to copy
         */
        public SpaceViewMap(SpaceViewMap other)
        {
            super(other);
            terrain = other.terrain;
            terrainLayered = other.terrainLayered;
            heat = other.heat;
            moisture = other.moisture;
            otherRidged = other.otherRidged;
            minHeat0 = other.minHeat0;
            maxHeat0 = other.maxHeat0;
            minHeat1 = other.minHeat1;
            maxHeat1 = other.maxHeat1;
            minWet0 = other.minWet0;
            maxWet0 = other.maxWet0;
            xPositions = ArrayTools.copy(other.xPositions);
            yPositions = ArrayTools.copy(other.yPositions);
            zPositions = ArrayTools.copy(other.zPositions);
            edges = Arrays.copyOf(other.edges, other.edges.length);
        }

        @Override
        public int wrapX(int x, int y) {
            y = Math.max(0, Math.min(y, height - 1));
            return Math.max(edges[y << 1], Math.min(x, edges[y << 1 | 1]));
        }

        @Override
        public int wrapY(final int x, final int y)  {
            return Math.max(0, Math.min(y, height - 1));
        }

        //private static final float root2 = Math.sqrt(2f), inverseRoot2 = 1f / root2, halfInverseRoot2 = 0.5f / root2;

        protected void regenerate(int startX, int startY, int usedWidth, int usedHeight,
                                  float landMod, float heatMod, long stateA, long stateB)
        {
            boolean fresh = false;
            if(cacheA != stateA || cacheB != stateB || landMod != landModifier || heatMod != heatModifier)
            {
                minHeight = Float.POSITIVE_INFINITY;
                maxHeight = Float.NEGATIVE_INFINITY;
                minHeightActual = Float.POSITIVE_INFINITY;
                maxHeightActual = Float.NEGATIVE_INFINITY;
                minHeat0 = Float.POSITIVE_INFINITY;
                maxHeat0 = Float.NEGATIVE_INFINITY;
                minHeat1 = Float.POSITIVE_INFINITY;
                maxHeat1 = Float.NEGATIVE_INFINITY;
                minHeat = Float.POSITIVE_INFINITY;
                maxHeat = Float.NEGATIVE_INFINITY;
                minWet0 = Float.POSITIVE_INFINITY;
                maxWet0 = Float.NEGATIVE_INFINITY;
                minWet = Float.POSITIVE_INFINITY;
                maxWet = Float.NEGATIVE_INFINITY;
                cacheA = stateA;
                cacheB = stateB;
                fresh = true;
            }
            rng.setState(stateA, stateB);
            long seedA = rng.nextLong(), seedB = rng.nextLong(), seedC = rng.nextLong();
            int t;

            landModifier = (landMod <= 0) ? rng.nextFloat(0.2f) + 0.91f : landMod;
            heatModifier = (heatMod <= 0) ? rng.nextFloat(0.45f) * (rng.nextFloat()-0.5f) + 1.1f : heatMod;

            float p,
                    ps, pc,
                    qs, qc,
                    h, temp, yPos, xPos, iyPos, ixPos,
                    i_uw = usedWidth / (float)width,
                    i_uh = usedHeight / (float)height,
                    th, lon, lat, rho,
                    rx = width * 0.5f, irx = i_uw / rx,
                    ry = height * 0.5f, iry = i_uh / ry;

            yPos = startY - ry;
            iyPos = yPos / ry;
            for (int y = 0; y < height; y++, yPos += i_uh, iyPos += iry) {

                boolean inSpace = true;
                xPos = startX - rx;
                ixPos = xPos / rx;
                for (int x = 0; x < width; x++, xPos += i_uw, ixPos += irx) {
                    rho = (float) Math.sqrt(ixPos * ixPos + iyPos * iyPos);
                    if(rho > 1f) {
                        heightCodeData[x][y] = 10000;
                        inSpace = true;
                        continue;
                    }
                    if(inSpace)
                    {
                        inSpace = false;
                        edges[y << 1] = x;
                    }
                    edges[y << 1 | 1] = x;
                    th = TrigTools.asin(rho); // c
                    lat = TrigTools.asin(iyPos);
                    lon = centerLongitude + TrigTools.atan2(ixPos * rho, rho * TrigTools.cos(th));

                    qc = TrigTools.cos(lat);
                    qs = TrigTools.sin(lat);

                    pc = TrigTools.cos(lon) * qc;
                    ps = TrigTools.sin(lon) * qc;

                    xPositions[x][y] = pc;
                    yPositions[x][y] = ps;
                    zPositions[x][y] = qs;
                    heightData[x][y] = (h = terrainLayered.getNoiseWithSeed(pc +
                                    terrain.getNoiseWithSeed(pc, ps, qs,seedB - seedA) * 0.5f,
                            ps, qs, seedA) + landModifier - 1f);
//                    heightData[x][y] = (h = terrain4D.getNoiseWithSeed(pc, ps, qs,
//                            (terrainLayered.getNoiseWithSeed(pc, ps, qs, seedB - seedA)
//                                    + terrain.getNoiseWithSeed(pc, ps, qs, seedC - seedB)) * 0.5f,
//                            seedA) * landModifier);
                    heatData[x][y] = (p = heat.getNoiseWithSeed(pc, ps
                                    + 0.375f * otherRidged.getNoiseWithSeed(pc, ps, qs,seedB + seedC)
                            , qs, seedB));
                    moistureData[x][y] = (temp = moisture.getNoiseWithSeed(pc, ps, qs
                                    + 0.375f * otherRidged.getNoiseWithSeed(pc, ps, qs, seedC + seedA)
                            , seedC));
                    minHeightActual = Math.min(minHeightActual, h);
                    maxHeightActual = Math.max(maxHeightActual, h);
                    if(fresh) {
                        minHeight = Math.min(minHeight, h);
                        maxHeight = Math.max(maxHeight, h);

                        minHeat0 = Math.min(minHeat0, p);
                        maxHeat0 = Math.max(maxHeat0, p);

                        minWet0 = Math.min(minWet0, temp);
                        maxWet0 = Math.max(maxWet0, temp);
                    }
                }
                minHeightActual = Math.min(minHeightActual, minHeight);
                maxHeightActual = Math.max(maxHeightActual, maxHeight);

            }
            float  heatDiff = 0.8f / (maxHeat0 - minHeat0),
                    wetDiff = 1f / (maxWet0 - minWet0),
                    hMod,
                    halfHeight = (height - 1) * 0.5f, i_half = 1f / halfHeight;
            yPos = startY + i_uh;
            ps = Float.POSITIVE_INFINITY;
            pc = Float.NEGATIVE_INFINITY;

            for (int y = 0; y < height; y++, yPos += i_uh) {
                temp = Math.abs(yPos - halfHeight) * i_half;
                temp *= (2.4f - temp);
                temp = 2.2f - temp;
                for (int x = 0; x < width; x++) {
                    h = heightData[x][y];
                    if(heightCodeData[x][y] == 10000) {
                        heightCodeData[x][y] = 1000;
                        continue;
                    }
                    else
                        heightCodeData[x][y] = (t = codeHeight(h));
                    hMod = 1f;
                    switch (t) {
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            h = 0.4f;
                            hMod = 0.2f;
                            break;
                        case 6:
                            h = -0.1f * (h - forestLower - 0.08f);
                            break;
                        case 7:
                            h *= -0.25f;
                            break;
                        case 8:
                            h *= -0.4f;
                            break;
                        default:
                            h *= 0.05f;
                    }
                    heatData[x][y] = (h = (((heatData[x][y] - minHeat0) * heatDiff * hMod) + h + 0.6f) * temp);
                    if (fresh) {
                        ps = Math.min(ps, h); //minHeat0
                        pc = Math.max(pc, h); //maxHeat0
                    }
                }
            }
            if(fresh)
            {
                minHeat1 = ps;
                maxHeat1 = pc;
            }
            heatDiff = heatModifier / (maxHeat1 - minHeat1);
            qs = Float.POSITIVE_INFINITY;
            qc = Float.NEGATIVE_INFINITY;
            ps = Float.POSITIVE_INFINITY;
            pc = Float.NEGATIVE_INFINITY;


            for (int y = 0; y < height; y++) {
                for (int x = 0; x < width; x++) {
                    heatData[x][y] = (h = ((heatData[x][y] - minHeat1) * heatDiff));
                    moistureData[x][y] = (temp = (moistureData[x][y] - minWet0) * wetDiff);
                    if (fresh) {
                        qs = Math.min(qs, h);
                        qc = Math.max(qc, h);
                        ps = Math.min(ps, temp);
                        pc = Math.max(pc, temp);
                    }
                }
            }
            if(fresh)
            {
                minHeat = qs;
                maxHeat = qc;
                minWet = ps;
                maxWet = pc;
            }
            landData.refill(heightCodeData, 4, 999);
        }
    }
    /**
     * A concrete implementation of {@link WorldMapGenerator} that projects the world map onto a shape with a flat top
     * and bottom but near-circular sides. This is an equal-area projection, like EllipticalWorldMap, so effects that fill
     * areas on a map like PoliticalMapper will fill (almost) equally on any part of the map. This has less
     * distortion on the far left and far right edges of the map than EllipticalWorldMap, but the flat top and bottom are
     * probably very distorted in a small area near the poles.
     * This uses the <a href="https://en.wikipedia.org/wiki/Eckert_IV_projection">Eckert IV projection</a>.
     * <a href="https://yellowstonegames.github.io/SquidLib/RoundSideWorldMap.png">Example map</a>
     */
    public static class RoundSideMap extends WorldMapGenerator {
        private static final long serialVersionUID = 1L;
        protected static final float terrainFreq = 1.45f, terrainLayeredFreq = 2.6f, heatFreq = 2.1f, moistureFreq = 2.125f, otherFreq = 3.375f;
        protected float minHeat0 = Float.POSITIVE_INFINITY, maxHeat0 = Float.NEGATIVE_INFINITY,
                minHeat1 = Float.POSITIVE_INFINITY, maxHeat1 = Float.NEGATIVE_INFINITY,
                minWet0 = Float.POSITIVE_INFINITY, maxWet0 = Float.NEGATIVE_INFINITY;

        public final Noise terrain, heat, moisture, otherRidged, terrainLayered;
        public final float[][] xPositions,
                yPositions,
                zPositions;
        protected final int[] edges;


        /**
         * Constructs a concrete WorldMapGenerator for a map that can be used to display a projection of a globe onto an
         * ellipse without distortion of the sizes of features but with significant distortion of shape.
         * Always makes a 200x100 map.
         * Uses Noise as its noise generator, with 1f as the octave multiplier affecting detail.
         * If you were using {@link RoundSideMap#RoundSideMap(long, int, int, Noise, float)}, then this would be the
         * same as passing the parameters {@code 0x1337BABE1337D00DL, 200, 100, DEFAULT_NOISE, 1f}.
         */
        public RoundSideMap() {
            this(0x1337BABE1337D00DL, 200, 100, DEFAULT_NOISE, 1f);
        }

        /**
         * Constructs a concrete WorldMapGenerator for a map that can be used to display a projection of a globe onto an
         * ellipse without distortion of the sizes of features but with significant distortion of shape.
         * Takes only the width/height of the map. The initial seed is set to the same large long
         * every time, and it's likely that you would set the seed when you call {@link #generate(long, long)}. The width and
         * height of the map cannot be changed after the fact, but you can zoom in.
         * Uses Noise as its noise generator, with 1f as the octave multiplier affecting detail.
         *
         * @param mapWidth  the width of the map(s) to generate; cannot be changed later
         * @param mapHeight the height of the map(s) to generate; cannot be changed later
         */
        public RoundSideMap(int mapWidth, int mapHeight) {
            this(0x1337BABE1337D00DL, mapWidth, mapHeight,  DEFAULT_NOISE,1f);
        }

        /**
         * Constructs a concrete WorldMapGenerator for a map that can be used to display a projection of a globe onto an
         * ellipse without distortion of the sizes of features but with significant distortion of shape.
         * Takes an initial seed and the width/height of the map. The {@code initialSeed}
         * parameter may or may not be used, since you can specify the seed to use when you call {@link #generate(long, long)}.
         * The width and height of the map cannot be changed after the fact, but you can zoom in.
         * Uses Noise as its noise generator, with 1f as the octave multiplier affecting detail.
         *
         * @param initialSeed the seed for the LaserRandom this uses; this may also be set per-call to generate
         * @param mapWidth    the width of the map(s) to generate; cannot be changed later
         * @param mapHeight   the height of the map(s) to generate; cannot be changed later
         */
        public RoundSideMap(long initialSeed, int mapWidth, int mapHeight) {
            this(initialSeed, mapWidth, mapHeight, DEFAULT_NOISE, 1f);
        }

        /**
         * Constructs a concrete WorldMapGenerator for a map that can be used to display a projection of a globe onto an
         * ellipse without distortion of the sizes of features but with significant distortion of shape.
         * Takes an initial seed and the width/height of the map. The {@code initialSeed}
         * parameter may or may not be used, since you can specify the seed to use when you call {@link #generate(long, long)}.
         * The width and height of the map cannot be changed after the fact, but you can zoom in.
         * Uses Noise as its noise generator, with the given octave multiplier affecting detail.
         *
         * @param initialSeed the seed for the LaserRandom this uses; this may also be set per-call to generate
         * @param mapWidth    the width of the map(s) to generate; cannot be changed later
         * @param mapHeight   the height of the map(s) to generate; cannot be changed later
         * @param octaveMultiplier used to adjust the level of detail, with 0.5f at the bare-minimum detail and 1f normal
         */
        public RoundSideMap(long initialSeed, int mapWidth, int mapHeight, float octaveMultiplier) {
            this(initialSeed, mapWidth, mapHeight, DEFAULT_NOISE, octaveMultiplier);
        }

        /**
         * Constructs a concrete WorldMapGenerator for a map that can be used to display a projection of a globe onto an
         * ellipse without distortion of the sizes of features but with significant distortion of shape.
         * Takes an initial seed and the width/height of the map. The {@code initialSeed}
         * parameter may or may not be used, since you can specify the seed to use when you call {@link #generate(long, long)}.
         * The width and height of the map cannot be changed after the fact, but you can zoom in.
         * Uses the given noise generator, with 1f as the octave multiplier affecting detail. The suggested Noise
         * implementation to use is {@link Noise#instance}
         *
         * @param initialSeed the seed for the LaserRandom this uses; this may also be set per-call to generate
         * @param mapWidth    the width of the map(s) to generate; cannot be changed later
         * @param mapHeight   the height of the map(s) to generate; cannot be changed later
         * @param noiseGenerator an instance of a noise generator capable of 3D noise, usually {@link Noise}
         */
        public RoundSideMap(long initialSeed, int mapWidth, int mapHeight, Noise noiseGenerator) {
            this(initialSeed, mapWidth, mapHeight, noiseGenerator, 1f);
        }

        /**
         * Constructs a concrete WorldMapGenerator for a map that can be used to display a projection of a globe onto an
         * ellipse without distortion of the sizes of features but with significant distortion of shape.
         * Takes an initial seed, the width/height of the map, and parameters for noise generation (a
         * {@link Noise} implementation, where {@link Noise#instance} is suggested, and a
         * multiplier on how many octaves of noise to use, with 1f being normal (high) detail and higher multipliers
         * producing even more detailed noise when zoomed-in). The {@code initialSeed} parameter may or may not be used,
         * since you can specify the seed to use when you call {@link #generate(long, long)}. The width and height of the map
         * cannot be changed after the fact, but you can zoom in. Noise will be the fastest 3D generator to use for
         * {@code noiseGenerator}, and the seed it's constructed with doesn't matter because this will change the
         * seed several times at different scales of noise (it's fine to use the static {@link Noise#instance}
         * because it has no changing state between runs of the program). The {@code octaveMultiplier} parameter should
         * probably be no lower than 0.5f, but can be arbitrarily high if you're willing to spend much more time on
         * generating detail only noticeable at very high zoom; normally 1f is fine and may even be too high for maps
         * that don't require zooming.
         * @param initialSeed the seed for the LaserRandom this uses; this may also be set per-call to generate
         * @param mapWidth the width of the map(s) to generate; cannot be changed later
         * @param mapHeight the height of the map(s) to generate; cannot be changed later
         * @param noiseGenerator an instance of a noise generator capable of 3D noise, usually {@link Noise}
         * @param octaveMultiplier used to adjust the level of detail, with 0.5f at the bare-minimum detail and 1f normal
         */
        public RoundSideMap(long initialSeed, int mapWidth, int mapHeight, Noise noiseGenerator, float octaveMultiplier) {
            super(initialSeed, mapWidth, mapHeight);
            xPositions = new float[width][height];
            yPositions = new float[width][height];
            zPositions = new float[width][height];
            edges = new int[height << 1];

            terrain = new Noise(noiseGenerator); terrain.setFrequency(terrain.getFrequency() * terrainFreq);
            terrain.setNoiseType(terrain.getNoiseType() | 1); terrain.setFractalOctaves((int)(0.5f + octaveMultiplier * 10));
            terrain.setFractalType(Noise.RIDGED_MULTI);

            terrainLayered = new Noise(noiseGenerator); terrainLayered.setFrequency(terrainLayered.getFrequency() * terrainLayeredFreq * 0.325f);
            terrainLayered.setNoiseType(terrainLayered.getNoiseType() | 1); terrainLayered.setFractalOctaves((int)(0.5f + octaveMultiplier * 8));

            heat = new Noise(noiseGenerator); heat.setFrequency(heat.getFrequency() * heatFreq);
            heat.setNoiseType(heat.getNoiseType() | 1); heat.setFractalOctaves((int)(0.5f + octaveMultiplier * 3));

            moisture = new Noise(noiseGenerator); moisture.setFrequency(moisture.getFrequency() * moistureFreq);
            moisture.setNoiseType(moisture.getNoiseType() | 1); moisture.setFractalOctaves((int)(0.5f + octaveMultiplier * 4));

            otherRidged = new Noise(noiseGenerator); otherRidged.setFrequency(otherRidged.getFrequency() * otherFreq);
            otherRidged.setNoiseType(otherRidged.getNoiseType() | 1); otherRidged.setFractalOctaves((int)(0.5f + octaveMultiplier * 6));
            otherRidged.setFractalType(Noise.RIDGED_MULTI);
        }

        /**
         * Copies the RoundSideMap {@code other} to construct a new one that is exactly the same. References will only
         * be shared to Noise classes.
         * @param other a RoundSideMap to copy
         */
        public RoundSideMap(RoundSideMap other)
        {
            super(other);
            terrain = other.terrain;
            terrainLayered = other.terrainLayered;
            heat = other.heat;
            moisture = other.moisture;
            otherRidged = other.otherRidged;
            minHeat0 = other.minHeat0;
            maxHeat0 = other.maxHeat0;
            minHeat1 = other.minHeat1;
            maxHeat1 = other.maxHeat1;
            minWet0 = other.minWet0;
            maxWet0 = other.maxWet0;
            xPositions = ArrayTools.copy(other.xPositions);
            yPositions = ArrayTools.copy(other.yPositions);
            zPositions = ArrayTools.copy(other.zPositions);
            edges = Arrays.copyOf(other.edges, other.edges.length);
        }

        @Override
        public int wrapX(final int x, int y) {
            y = Math.max(0, Math.min(y, height - 1));
            if(x < edges[y << 1])
                return edges[y << 1 | 1];
            else if(x > edges[y << 1 | 1])
                return edges[y << 1];
            else return x;
        }

        @Override
        public int wrapY(final int x, final int y)  {
            return Math.max(0, Math.min(y, height - 1));
        }

        protected void regenerate(int startX, int startY, int usedWidth, int usedHeight,
                                  float landMod, float heatMod, long stateA, long stateB)
        {
            boolean fresh = false;
            if(cacheA != stateA || cacheB != stateB || landMod != landModifier || heatMod != heatModifier)
            {
                minHeight = Float.POSITIVE_INFINITY;
                maxHeight = Float.NEGATIVE_INFINITY;
                minHeightActual = Float.POSITIVE_INFINITY;
                maxHeightActual = Float.NEGATIVE_INFINITY;
                minHeat0 = Float.POSITIVE_INFINITY;
                maxHeat0 = Float.NEGATIVE_INFINITY;
                minHeat1 = Float.POSITIVE_INFINITY;
                maxHeat1 = Float.NEGATIVE_INFINITY;
                minHeat = Float.POSITIVE_INFINITY;
                maxHeat = Float.NEGATIVE_INFINITY;
                minWet0 = Float.POSITIVE_INFINITY;
                maxWet0 = Float.NEGATIVE_INFINITY;
                minWet = Float.POSITIVE_INFINITY;
                maxWet = Float.NEGATIVE_INFINITY;
                cacheA = stateA;
                cacheB = stateB;
                fresh = true;
            }
            rng.setState(stateA, stateB);
            long seedA = rng.nextLong(), seedB = rng.nextLong(), seedC = rng.nextLong();
            int t;

            landModifier = (landMod <= 0) ? rng.nextFloat(0.2f) + 0.91f : landMod;
            heatModifier = (heatMod <= 0) ? rng.nextFloat(0.45f) * (rng.nextFloat()-0.5f) + 1.1f : heatMod;

            float p,
                    ps, pc,
                    qs, qc,
                    h, temp, yPos, xPos,
                    i_uw = usedWidth / (float)width,
                    i_uh = usedHeight / (float)height,
                    th, thb, thx, thy, lon, lat,
                    rx = width * 0.25f, irx = 1.326500428177002f / rx, hw = width * 0.5f,
                    ry = height * 0.5f, iry = 1f / ry;

            yPos = startY - ry;
            for (int y = 0; y < height; y++, yPos += i_uh) {
                thy = yPos * iry;//TrigTools.sin(thb);
                thb = TrigTools.asin(thy);
                thx = TrigTools.cos(thb);
                //1.3265004f 0.7538633073600218f  1.326500428177002f
                lon = (thx == TrigTools.HALF_PI || thx == -TrigTools.HALF_PI) ? 0x1.0p70f : irx / (0.42223820031577125f * (1f + thx));
                qs = (thb + (thx + 2f) * thy) * 0.2800495767557787f;
                lat = TrigTools.asin(qs);

                qc = TrigTools.cos(lat);

                boolean inSpace = true;
                xPos = startX - hw;
                for (int x = 0/*, xt = 0*/; x < width; x++, xPos += i_uw) {
                    th = lon * xPos;
                    if(th < -3.141592653589793f || th > 3.141592653589793f) {
                        heightCodeData[x][y] = 10000;
                        inSpace = true;
                        continue;
                    }
                    if(inSpace)
                    {
                        inSpace = false;
                        edges[y << 1] = x;
                    }
                    edges[y << 1 | 1] = x;
                    th += centerLongitude;
                    ps = TrigTools.sin(th) * qc;
                    pc = TrigTools.cos(th) * qc;
                    xPositions[x][y] = pc;
                    yPositions[x][y] = ps;
                    zPositions[x][y] = qs;
                    heightData[x][y] = (h = terrainLayered.getNoiseWithSeed(pc +
                                    terrain.getNoiseWithSeed(pc, ps, qs,seedB - seedA) * 0.5f,
                            ps, qs, seedA) + landModifier - 1f);
                    heatData[x][y] = (p = heat.getNoiseWithSeed(pc, ps
                                    + 0.375f * otherRidged.getNoiseWithSeed(pc, ps, qs,seedB + seedC)
                            , qs, seedB));
                    moistureData[x][y] = (temp = moisture.getNoiseWithSeed(pc, ps, qs
                                    + 0.375f * otherRidged.getNoiseWithSeed(pc, ps, qs, seedC + seedA)
                            , seedC));
                    minHeightActual = Math.min(minHeightActual, h);
                    maxHeightActual = Math.max(maxHeightActual, h);
                    if(fresh) {
                        minHeight = Math.min(minHeight, h);
                        maxHeight = Math.max(maxHeight, h);

                        minHeat0 = Math.min(minHeat0, p);
                        maxHeat0 = Math.max(maxHeat0, p);

                        minWet0 = Math.min(minWet0, temp);
                        maxWet0 = Math.max(maxWet0, temp);
                    }
                }
                minHeightActual = Math.min(minHeightActual, minHeight);
                maxHeightActual = Math.max(maxHeightActual, maxHeight);

            }
            float  heatDiff = 0.8f / (maxHeat0 - minHeat0),
                    wetDiff = 1f / (maxWet0 - minWet0),
                    hMod,
                    halfHeight = (height - 1) * 0.5f, i_half = 1f / halfHeight;
            yPos = startY + i_uh;
            ps = Float.POSITIVE_INFINITY;
            pc = Float.NEGATIVE_INFINITY;

            for (int y = 0; y < height; y++, yPos += i_uh) {
                temp = Math.abs(yPos - halfHeight) * i_half;
                temp *= (2.4f - temp);
                temp = 2.2f - temp;
                for (int x = 0; x < width; x++) {
                    h = heightData[x][y];
                    if(heightCodeData[x][y] == 10000) {
                        heightCodeData[x][y] = 1000;
                        continue;
                    }
                    else
                        heightCodeData[x][y] = (t = codeHeight(h));
                    hMod = 1f;
                    switch (t) {
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            h = 0.4f;
                            hMod = 0.2f;
                            break;
                        case 6:
                            h = -0.1f * (h - forestLower - 0.08f);
                            break;
                        case 7:
                            h *= -0.25f;
                            break;
                        case 8:
                            h *= -0.4f;
                            break;
                        default:
                            h *= 0.05f;
                    }
                    heatData[x][y] = (h = (((heatData[x][y] - minHeat0) * heatDiff * hMod) + h + 0.6f) * temp);
                    if (fresh) {
                        ps = Math.min(ps, h); //minHeat0
                        pc = Math.max(pc, h); //maxHeat0
                    }
                }
            }
            if(fresh)
            {
                minHeat1 = ps;
                maxHeat1 = pc;
            }
            heatDiff = heatModifier / (maxHeat1 - minHeat1);
            qs = Float.POSITIVE_INFINITY;
            qc = Float.NEGATIVE_INFINITY;
            ps = Float.POSITIVE_INFINITY;
            pc = Float.NEGATIVE_INFINITY;


            for (int y = 0; y < height; y++) {
                for (int x = 0; x < width; x++) {
                    heatData[x][y] = (h = ((heatData[x][y] - minHeat1) * heatDiff));
                    moistureData[x][y] = (temp = (moistureData[x][y] - minWet0) * wetDiff);
                    if (fresh) {
                        qs = Math.min(qs, h);
                        qc = Math.max(qc, h);
                        ps = Math.min(ps, temp);
                        pc = Math.max(pc, temp);
                    }
                }
            }
            if(fresh)
            {
                minHeat = qs;
                maxHeat = qc;
                minWet = ps;
                maxWet = pc;
            }
            landData.refill(heightCodeData, 4, 999);
        }
    }
    /**
     * A concrete implementation of {@link WorldMapGenerator} that projects the world map onto a shape that resembles a
     * mix part-way between an ellipse and a rectangle. This is an equal-area projection, like EllipticalWorldMap, so effects that fill
     * areas on a map like PoliticalMapper will fill (almost) equally on any part of the map. This has less
     * distortion around all the edges than the other maps here, especially when comparing the North and South poles
     * with RoundSideMap.
     * This uses the <a href="https://en.wikipedia.org/wiki/Tobler_hyperelliptical_projection">Tobler hyperelliptical projection</a>.
     * <a href="">Example map</a>
     */
    public static class HyperellipticalMap extends WorldMapGenerator {
        private static final long serialVersionUID = 1L;
        protected static final float terrainFreq = 1.45f, terrainLayeredFreq = 2.6f, heatFreq = 2.1f, moistureFreq = 2.125f, otherFreq = 3.375f;
        protected float minHeat0 = Float.POSITIVE_INFINITY, maxHeat0 = Float.NEGATIVE_INFINITY,
                minHeat1 = Float.POSITIVE_INFINITY, maxHeat1 = Float.NEGATIVE_INFINITY,
                minWet0 = Float.POSITIVE_INFINITY, maxWet0 = Float.NEGATIVE_INFINITY;

        public final Noise terrain, heat, moisture, otherRidged, terrainLayered;
        public final float[][] xPositions,
                yPositions,
                zPositions;
        protected final int[] edges;
        private final float alpha, kappa, epsilon;
        private final float[] Z;


        /**
         * Constructs a concrete WorldMapGenerator for a map that can be used to display a projection of a globe onto an
         * ellipse without distortion of the sizes of features but with significant distortion of shape.
         * Always makes a 200x100 map.
         * Uses Noise as its noise generator, with 1f as the octave multiplier affecting detail.
         * If you were using {@link HyperellipticalMap#HyperellipticalMap(long, int, int, Noise, float)}, then this would be the
         * same as passing the parameters {@code 0x1337BABE1337D00DL, 200, 100, DEFAULT_NOISE, 1f}.
         * <a href="http://yellowstonegames.github.io/SquidLib/HyperellipseWorld.png" >Example map, showing special shape</a>
         */
        public HyperellipticalMap() {
            this(0x1337BABE1337D00DL, 200, 100, DEFAULT_NOISE, 1f);
        }

        /**
         * Constructs a concrete WorldMapGenerator for a map that can be used to display a projection of a globe onto an
         * ellipse without distortion of the sizes of features but with significant distortion of shape.
         * Takes only the width/height of the map. The initial seed is set to the same large long
         * every time, and it's likely that you would set the seed when you call {@link #generate(long, long)}. The width and
         * height of the map cannot be changed after the fact, but you can zoom in.
         * Uses Noise as its noise generator, with 1f as the octave multiplier affecting detail.
         *
         * @param mapWidth  the width of the map(s) to generate; cannot be changed later
         * @param mapHeight the height of the map(s) to generate; cannot be changed later
         */
        public HyperellipticalMap(int mapWidth, int mapHeight) {
            this(0x1337BABE1337D00DL, mapWidth, mapHeight,  DEFAULT_NOISE,1f);
        }

        /**
         * Constructs a concrete WorldMapGenerator for a map that can be used to display a projection of a globe onto an
         * ellipse without distortion of the sizes of features but with significant distortion of shape.
         * Takes an initial seed and the width/height of the map. The {@code initialSeed}
         * parameter may or may not be used, since you can specify the seed to use when you call {@link #generate(long, long)}.
         * The width and height of the map cannot be changed after the fact, but you can zoom in.
         * Uses Noise as its noise generator, with 1f as the octave multiplier affecting detail.
         *
         * @param initialSeed the seed for the LaserRandom this uses; this may also be set per-call to generate
         * @param mapWidth    the width of the map(s) to generate; cannot be changed later
         * @param mapHeight   the height of the map(s) to generate; cannot be changed later
         */
        public HyperellipticalMap(long initialSeed, int mapWidth, int mapHeight) {
            this(initialSeed, mapWidth, mapHeight, DEFAULT_NOISE, 1f);
        }

        /**
         * Constructs a concrete WorldMapGenerator for a map that can be used to display a projection of a globe onto an
         * ellipse without distortion of the sizes of features but with significant distortion of shape.
         * Takes an initial seed and the width/height of the map. The {@code initialSeed}
         * parameter may or may not be used, since you can specify the seed to use when you call {@link #generate(long, long)}.
         * The width and height of the map cannot be changed after the fact, but you can zoom in.
         * Uses Noise as its noise generator, with the given octave multiplier affecting detail.
         *
         * @param initialSeed the seed for the LaserRandom this uses; this may also be set per-call to generate
         * @param mapWidth    the width of the map(s) to generate; cannot be changed later
         * @param mapHeight   the height of the map(s) to generate; cannot be changed later
         * @param octaveMultiplier used to adjust the level of detail, with 0.5f at the bare-minimum detail and 1f normal
         */
        public HyperellipticalMap(long initialSeed, int mapWidth, int mapHeight, float octaveMultiplier) {
            this(initialSeed, mapWidth, mapHeight, DEFAULT_NOISE, octaveMultiplier);
        }

        /**
         * Constructs a concrete WorldMapGenerator for a map that can be used to display a projection of a globe onto an
         * ellipse without distortion of the sizes of features but with significant distortion of shape.
         * Takes an initial seed and the width/height of the map. The {@code initialSeed}
         * parameter may or may not be used, since you can specify the seed to use when you call {@link #generate(long, long)}.
         * The width and height of the map cannot be changed after the fact, but you can zoom in.
         * Uses the given noise generator, with 1f as the octave multiplier affecting detail. The suggested Noise
         * implementation to use is {@link Noise#instance}.
         *
         * @param initialSeed the seed for the LaserRandom this uses; this may also be set per-call to generate
         * @param mapWidth    the width of the map(s) to generate; cannot be changed later
         * @param mapHeight   the height of the map(s) to generate; cannot be changed later
         * @param noiseGenerator an instance of a noise generator capable of 3D noise, usually {@link Noise}
         */
        public HyperellipticalMap(long initialSeed, int mapWidth, int mapHeight, Noise noiseGenerator) {
            this(initialSeed, mapWidth, mapHeight, noiseGenerator, 1f);
        }

        /**
         * Constructs a concrete WorldMapGenerator for a map that can be used to display a projection of a globe onto an
         * ellipse without distortion of the sizes of features but with significant distortion of shape.
         * Takes an initial seed, the width/height of the map, and parameters for noise generation (a
         * {@link Noise} implementation, where {@link Noise#instance} is suggested, and a
         * multiplier on how many octaves of noise to use, with 1f being normal (high) detail and higher multipliers
         * producing even more detailed noise when zoomed-in). The {@code initialSeed} parameter may or may not be used,
         * since you can specify the seed to use when you call {@link #generate(long, long)}. The width and height of the map
         * cannot be changed after the fact, but you can zoom in. Noise will be the fastest 3D generator to use for
         * {@code noiseGenerator}, and the seed it's constructed with doesn't matter because this will change the
         * seed several times at different scales of noise (it's fine to use the static {@link Noise#instance}
         * because it has no changing state between runs of the program). The {@code octaveMultiplier} parameter should
         * probably be no lower than 0.5f, but can be arbitrarily high if you're willing to spend much more time on
         * generating detail only noticeable at very high zoom; normally 1f is fine and may even be too high for maps
         * that don't require zooming.
         * @param initialSeed the seed for the LaserRandom this uses; this may also be set per-call to generate
         * @param mapWidth the width of the map(s) to generate; cannot be changed later
         * @param mapHeight the height of the map(s) to generate; cannot be changed later
         * @param noiseGenerator an instance of a noise generator capable of 3D noise, usually {@link Noise}
         * @param octaveMultiplier used to adjust the level of detail, with 0.5f at the bare-minimum detail and 1f normal
         */
        public HyperellipticalMap(long initialSeed, int mapWidth, int mapHeight, Noise noiseGenerator, float octaveMultiplier){
            this(initialSeed, mapWidth, mapHeight, noiseGenerator, octaveMultiplier, 0.0625f, 2.5f);
        }

        /**
         * Constructs a concrete WorldMapGenerator for a map that can be used to display a projection of a globe onto an
         * ellipse without distortion of the sizes of features but with significant distortion of shape.
         * Takes an initial seed, the width/height of the map, and parameters for noise generation (a
         * {@link Noise} implementation, where {@link Noise#instance} is suggested, and a
         * multiplier on how many octaves of noise to use, with 1f being normal (high) detail and higher multipliers
         * producing even more detailed noise when zoomed-in). The {@code initialSeed} parameter may or may not be used,
         * since you can specify the seed to use when you call {@link #generate(long, long)}. The width and height of the map
         * cannot be changed after the fact, but you can zoom in. Noise will be the fastest 3D generator to use for
         * {@code noiseGenerator}, and the seed it's constructed with doesn't matter because this will change the
         * seed several times at different scales of noise (it's fine to use the static {@link Noise#instance}
         * because it has no changing state between runs of the program). The {@code octaveMultiplier} parameter should
         * probably be no lower than 0.5f, but can be arbitrarily high if you're willing to spend much more time on
         * generating detail only noticeable at very high zoom; normally 1f is fine and may even be too high for maps
         * that don't require zooming.
         * @param initialSeed the seed for the LaserRandom this uses; this may also be set per-call to generate
         * @param mapWidth the width of the map(s) to generate; cannot be changed later
         * @param mapHeight the height of the map(s) to generate; cannot be changed later
         * @param noiseGenerator an instance of a noise generator capable of 3D noise, usually {@link Noise}
         * @param octaveMultiplier used to adjust the level of detail, with 0.5f at the bare-minimum detail and 1f normal
         * @param alpha one of the Tobler parameters;  0.0625f is the default and this can range from 0f to 1f at least
         * @param kappa one of the Tobler parameters; 2.5f is the default but 2f-5f range values are also often used
         */
        public HyperellipticalMap(long initialSeed, int mapWidth, int mapHeight, Noise noiseGenerator,
                                  float octaveMultiplier, float alpha, float kappa){
            super(initialSeed, mapWidth, mapHeight);
            xPositions = new float[width][height];
            yPositions = new float[width][height];
            zPositions = new float[width][height];
            edges = new int[height << 1];

            terrain = new Noise(noiseGenerator); terrain.setFrequency(terrain.getFrequency() * terrainFreq);
            terrain.setNoiseType(terrain.getNoiseType() | 1); terrain.setFractalOctaves((int)(0.5f + octaveMultiplier * 10));
            terrain.setFractalType(Noise.RIDGED_MULTI);

            terrainLayered = new Noise(noiseGenerator); terrainLayered.setFrequency(terrainLayered.getFrequency() * terrainLayeredFreq * 0.325f);
            terrainLayered.setNoiseType(terrainLayered.getNoiseType() | 1); terrainLayered.setFractalOctaves((int)(0.5f + octaveMultiplier * 8));

            heat = new Noise(noiseGenerator); heat.setFrequency(heat.getFrequency() * heatFreq);
            heat.setNoiseType(heat.getNoiseType() | 1); heat.setFractalOctaves((int)(0.5f + octaveMultiplier * 3));

            moisture = new Noise(noiseGenerator); moisture.setFrequency(moisture.getFrequency() * moistureFreq);
            moisture.setNoiseType(moisture.getNoiseType() | 1); moisture.setFractalOctaves((int)(0.5f + octaveMultiplier * 4));

            otherRidged = new Noise(noiseGenerator); otherRidged.setFrequency(otherRidged.getFrequency() * otherFreq);
            otherRidged.setNoiseType(otherRidged.getNoiseType() | 1); otherRidged.setFractalOctaves((int)(0.5f + octaveMultiplier * 6));
            otherRidged.setFractalType(Noise.RIDGED_MULTI);

            this.alpha = alpha;
            this.kappa = kappa;
            this.Z = new float[height << 2];
            this.epsilon = ProjectionTools.simpsonIntegrateHyperellipse(0f, 1f, 0.25f / height, kappa);
            ProjectionTools.simpsonODESolveHyperellipse(1, this.Z, 0.25f / height, alpha, kappa, epsilon);
        }
        /**
         * Copies the HyperellipticalMap {@code other} to construct a new one that is exactly the same. References will only
         * be shared to Noise classes.
         * @param other a HyperellipticalMap to copy
         */
        public HyperellipticalMap(HyperellipticalMap other)
        {
            super(other);
            terrain = other.terrain;
            terrainLayered = other.terrainLayered;
            heat = other.heat;
            moisture = other.moisture;
            otherRidged = other.otherRidged;
            minHeat0 = other.minHeat0;
            maxHeat0 = other.maxHeat0;
            minHeat1 = other.minHeat1;
            maxHeat1 = other.maxHeat1;
            minWet0 = other.minWet0;
            maxWet0 = other.maxWet0;
            xPositions = ArrayTools.copy(other.xPositions);
            yPositions = ArrayTools.copy(other.yPositions);
            zPositions = ArrayTools.copy(other.zPositions);
            edges = Arrays.copyOf(other.edges, other.edges.length);
            alpha = other.alpha;
            kappa = other.kappa;
            epsilon = other.epsilon;
            Z = Arrays.copyOf(other.Z, other.Z.length);
        }


        @Override
        public int wrapX(final int x, int y) {
            y = Math.max(0, Math.min(y, height - 1));
            if(x < edges[y << 1])
                return edges[y << 1 | 1];
            else if(x > edges[y << 1 | 1])
                return edges[y << 1];
            else return x;
        }

        @Override
        public int wrapY(final int x, final int y)  {
            return Math.max(0, Math.min(y, height - 1));
        }

        /**
         * Given a latitude and longitude in radians (the conventional way of describing points on a globe), this gets the
         * (x,y) Coord on the map projection this generator uses that corresponds to the given lat-lon coordinates. If this
         * generator does not represent a globe (if it is toroidal, for instance) or if there is no "good way" to calculate
         * the projection for a given lat-lon coordinate, this returns null. This implementation never returns null.
         * If this is a supported operation and the parameters are valid, this returns a Coord with x between 0 and
         * {@link #width}, and y between 0 and {@link #height}, both exclusive. Automatically wraps the Coord's values using
         * {@link #wrapX(int, int)} and {@link #wrapY(int, int)}.
         *
         * @param latitude the latitude, from {@code -TrigTools.HALF_PI} to {@code TrigTools.HALF_PI}
         * @param longitude the longitude, from {@code 0f} to {@code TrigTools.PI2}
         * @return the point at the given latitude and longitude, as a Coord with x between 0 and {@link #width} and y between 0 and {@link #height}, or null if unsupported
         */
        @Override
        public Coord project(float latitude, float longitude) {
            final float z0 = Math.abs(TrigTools.sin(latitude));
            final int i = Arrays.binarySearch(Z, z0);
            final float y;
            if (i >= 0)
                y = i/(Z.length-1f);
            else if (-i-1 >= Z.length)
                y = Z[Z.length-1];
            else
                y = ((z0-Z[-i-2])/(Z[-i-1]-Z[-i-2]) + (-i-2))/(Z.length-1f);
            final int xx = (int)(((longitude - getCenterLongitude() + 12.566370614359172f) % 6.283185307179586f) * Math.abs(alpha + (1-alpha)*Math.pow(1 - Math.pow(Math.abs(y),kappa), 1/kappa)) + 0.5f);
            final int yy = (int)(y * Math.signum(latitude) * height * 0.5f + 0.5f);
            return Coord.get(wrapX(xx, yy), wrapY(xx, yy));
        }

        protected void regenerate(int startX, int startY, int usedWidth, int usedHeight,
                                  float landMod, float heatMod, long stateA, long stateB)
        {
            boolean fresh = false;
            if(cacheA != stateA || cacheB != stateB || landMod != landModifier || heatMod != heatModifier)
            {
                minHeight = Float.POSITIVE_INFINITY;
                maxHeight = Float.NEGATIVE_INFINITY;
                minHeightActual = Float.POSITIVE_INFINITY;
                maxHeightActual = Float.NEGATIVE_INFINITY;
                minHeat0 = Float.POSITIVE_INFINITY;
                maxHeat0 = Float.NEGATIVE_INFINITY;
                minHeat1 = Float.POSITIVE_INFINITY;
                maxHeat1 = Float.NEGATIVE_INFINITY;
                minHeat = Float.POSITIVE_INFINITY;
                maxHeat = Float.NEGATIVE_INFINITY;
                minWet0 = Float.POSITIVE_INFINITY;
                maxWet0 = Float.NEGATIVE_INFINITY;
                minWet = Float.POSITIVE_INFINITY;
                maxWet = Float.NEGATIVE_INFINITY;
                cacheA = stateA;
                cacheB = stateB;
                fresh = true;
            }
            rng.setState(stateA, stateB);
            long seedA = rng.nextLong(), seedB = rng.nextLong(), seedC = rng.nextLong();
            int t;

            landModifier = (landMod <= 0) ? rng.nextFloat(0.2f) + 0.91f : landMod;
            heatModifier = (heatMod <= 0) ? rng.nextFloat(0.45f) * (rng.nextFloat()-0.5f) + 1.1f : heatMod;

            float p,
                    ps, pc,
                    qs, qc,
                    h, temp, yPos, xPos,
                    i_uw = usedWidth / (float)width,
                    i_uh = usedHeight / (float)height,
                    th, lon,
                    rx = width * 0.5f, irx = TrigTools.PI / rx, hw = width * 0.5f,
                    ry = height * 0.5f, iry = 1f / ry;

            yPos = startY - ry;
            for (int y = 0; y < height; y++, yPos += i_uh) {
                lon = TrigTools.asin(Z[(int)(0.5f + Math.abs(yPos*iry)*(Z.length-1))])*Math.signum(yPos);
                qs = TrigTools.sin(lon);
                qc = TrigTools.cos(lon);

                boolean inSpace = true;
                xPos = startX - hw;
                for (int x = 0/*, xt = 0*/; x < width; x++, xPos += i_uw) {
                    th = xPos * irx / Math.abs(alpha + (1-alpha)*ProjectionTools.hyperellipse(yPos * iry, kappa));
                    if(th < -3.141592653589793f || th > 3.141592653589793f) {
                        heightCodeData[x][y] = 10000;
                        inSpace = true;
                        continue;
                    }
                    if(inSpace)
                    {
                        inSpace = false;
                        edges[y << 1] = x;
                    }
                    edges[y << 1 | 1] = x;
                    th += centerLongitude;
                    ps = TrigTools.sin(th) * qc;
                    pc = TrigTools.cos(th) * qc;
                    xPositions[x][y] = pc;
                    yPositions[x][y] = ps;
                    zPositions[x][y] = qs;
                    heightData[x][y] = (h = terrainLayered.getNoiseWithSeed(pc +
                                    terrain.getNoiseWithSeed(pc, ps, qs, seedB - seedA) * 0.5f,
                            ps, qs, seedA) + landModifier - 1f);
                    heatData[x][y] = (p = heat.getNoiseWithSeed(pc, ps
                                    + 0.375f * otherRidged.getNoiseWithSeed(pc, ps, qs, seedB + seedC)
                            , qs, seedB));
                    moistureData[x][y] = (temp = moisture.getNoiseWithSeed(pc, ps, qs
                                    + 0.375f * otherRidged.getNoiseWithSeed(pc, ps, qs, seedC + seedA)
                            , seedC));
                    minHeightActual = Math.min(minHeightActual, h);
                    maxHeightActual = Math.max(maxHeightActual, h);
                    if(fresh) {
                        minHeight = Math.min(minHeight, h);
                        maxHeight = Math.max(maxHeight, h);

                        minHeat0 = Math.min(minHeat0, p);
                        maxHeat0 = Math.max(maxHeat0, p);

                        minWet0 = Math.min(minWet0, temp);
                        maxWet0 = Math.max(maxWet0, temp);
                    }
                }
                minHeightActual = Math.min(minHeightActual, minHeight);
                maxHeightActual = Math.max(maxHeightActual, maxHeight);

            }
            float  heatDiff = 0.8f / (maxHeat0 - minHeat0),
                    wetDiff = 1f / (maxWet0 - minWet0),
                    hMod,
                    halfHeight = (height - 1) * 0.5f, i_half = 1f / halfHeight;
            yPos = startY + i_uh;
            ps = Float.POSITIVE_INFINITY;
            pc = Float.NEGATIVE_INFINITY;

            for (int y = 0; y < height; y++, yPos += i_uh) {
                temp = Math.abs(yPos - halfHeight) * i_half;
                temp *= (2.4f - temp);
                temp = 2.2f - temp;
                for (int x = 0; x < width; x++) {
                    h = heightData[x][y];
                    if(heightCodeData[x][y] == 10000) {
                        heightCodeData[x][y] = 1000;
                        continue;
                    }
                    else
                        heightCodeData[x][y] = (t = codeHeight(h));
                    hMod = 1f;
                    switch (t) {
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            h = 0.4f;
                            hMod = 0.2f;
                            break;
                        case 6:
                            h = -0.1f * (h - forestLower - 0.08f);
                            break;
                        case 7:
                            h *= -0.25f;
                            break;
                        case 8:
                            h *= -0.4f;
                            break;
                        default:
                            h *= 0.05f;
                    }
                    heatData[x][y] = (h = (((heatData[x][y] - minHeat0) * heatDiff * hMod) + h + 0.6f) * temp);
                    if (fresh) {
                        ps = Math.min(ps, h); //minHeat0
                        pc = Math.max(pc, h); //maxHeat0
                    }
                }
            }
            if(fresh)
            {
                minHeat1 = ps;
                maxHeat1 = pc;
            }
            heatDiff = heatModifier / (maxHeat1 - minHeat1);
            qs = Float.POSITIVE_INFINITY;
            qc = Float.NEGATIVE_INFINITY;
            ps = Float.POSITIVE_INFINITY;
            pc = Float.NEGATIVE_INFINITY;


            for (int y = 0; y < height; y++) {
                for (int x = 0; x < width; x++) {
                    heatData[x][y] = (h = ((heatData[x][y] - minHeat1) * heatDiff));
                    moistureData[x][y] = (temp = (moistureData[x][y] - minWet0) * wetDiff);
                    if (fresh) {
                        qs = Math.min(qs, h);
                        qc = Math.max(qc, h);
                        ps = Math.min(ps, temp);
                        pc = Math.max(pc, temp);
                    }
                }
            }
            if(fresh)
            {
                minHeat = qs;
                maxHeat = qc;
                minWet = ps;
                maxWet = pc;
            }
            landData.refill(heightCodeData, 4, 999);
        }
    }

    /**
     * A concrete implementation of {@link WorldMapGenerator} that imitates an infinite-distance perspective view of a
     * world, showing only one hemisphere, that should be as wide as it is tall (its outline is a circle). It should
     * look as a world would when viewed from space, and implements rotation differently to allow the planet to be
     * rotated without recalculating all the data, though it cannot zoom. Note that calling
     * {@link #setCenterLongitude(float)} does a lot more work than in other classes, but less than fully calling
     * {@link #generate()} in those classes, since it doesn't remake the map data at a slightly different rotation and
     * instead keeps a single map in use the whole time, using sections of it. This uses an
     * <a href="https://en.wikipedia.org/wiki/Orthographic_projection_in_cartography">Orthographic projection</a> with
     * the latitude always at the equator; the internal map is stored as a {@link StretchWorldMap}, which uses a
     * <a href="https://en.wikipedia.org/wiki/Cylindrical_equal-area_projection#Discussion">cylindrical equal-area
     * projection</a>, specifically the Lambert equal-area projection.
     * <br>
     * <a href="https://i.imgur.com/WNa5nQ1.gifv">Example view of a planet rotating</a>.
     * <a href="https://i.imgur.com/NV5IMd6.gifv">Another example</a>.
     */
    public static class RotatingSpaceMap extends WorldMapGenerator {
        private static final long serialVersionUID = 1L;
        protected float minHeat0 = Float.POSITIVE_INFINITY, maxHeat0 = Float.NEGATIVE_INFINITY,
                minHeat1 = Float.POSITIVE_INFINITY, maxHeat1 = Float.NEGATIVE_INFINITY,
                minWet0 = Float.POSITIVE_INFINITY, maxWet0 = Float.NEGATIVE_INFINITY;

        public final float[][] xPositions,
                yPositions,
                zPositions;
        protected final int[] edges;
        public final StretchWorldMap storedMap;
        /**
         * Constructs a concrete WorldMapGenerator for a map that can be used to view a spherical world from space,
         * showing only one hemisphere at a time.
         * Always makes a 100x100 map.
         * Uses Noise as its noise generator, with 1f as the octave multiplier affecting detail.
         * If you were using {@link RotatingSpaceMap#RotatingSpaceMap(long, int, int, Noise, float)}, then this would be the
         * same as passing the parameters {@code 0x1337BABE1337D00DL, 100, 100, DEFAULT_NOISE, 1f}.
         */
        public RotatingSpaceMap() {
            this(0x1337BABE1337D00DL, 100, 100, DEFAULT_NOISE, 1f);
        }

        /**
         * Constructs a concrete WorldMapGenerator for a map that can be used to view a spherical world from space,
         * showing only one hemisphere at a time.
         * Takes only the width/height of the map. The initial seed is set to the same large long
         * every time, and it's likely that you would set the seed when you call {@link #generate(long, long)}. The width and
         * height of the map cannot be changed after the fact, but you can zoom in.
         * Uses Noise as its noise generator, with 1f as the octave multiplier affecting detail.
         *
         * @param mapWidth  the width of the map(s) to generate; cannot be changed later
         * @param mapHeight the height of the map(s) to generate; cannot be changed later
         */
        public RotatingSpaceMap(int mapWidth, int mapHeight) {
            this(0x1337BABE1337D00DL, mapWidth, mapHeight, DEFAULT_NOISE, 1f);
        }

        /**
         * Constructs a concrete WorldMapGenerator for a map that can be used to view a spherical world from space,
         * showing only one hemisphere at a time.
         * Takes an initial seed and the width/height of the map. The {@code initialSeed}
         * parameter may or may not be used, since you can specify the seed to use when you call {@link #generate(long, long)}.
         * The width and height of the map cannot be changed after the fact, but you can zoom in.
         * Uses Noise as its noise generator, with 1f as the octave multiplier affecting detail.
         *
         * @param initialSeed the seed for the LaserRandom this uses; this may also be set per-call to generate
         * @param mapWidth    the width of the map(s) to generate; cannot be changed later
         * @param mapHeight   the height of the map(s) to generate; cannot be changed later
         */
        public RotatingSpaceMap(long initialSeed, int mapWidth, int mapHeight) {
            this(initialSeed, mapWidth, mapHeight, DEFAULT_NOISE, 1f);
        }

        /**
         * Constructs a concrete WorldMapGenerator for a map that can be used to view a spherical world from space,
         * showing only one hemisphere at a time.
         * Takes an initial seed and the width/height of the map. The {@code initialSeed}
         * parameter may or may not be used, since you can specify the seed to use when you call {@link #generate(long, long)}.
         * The width and height of the map cannot be changed after the fact, but you can zoom in.
         * Uses Noise as its noise generator, with the given octave multiplier affecting detail.
         *
         * @param initialSeed the seed for the LaserRandom this uses; this may also be set per-call to generate
         * @param mapWidth    the width of the map(s) to generate; cannot be changed later
         * @param mapHeight   the height of the map(s) to generate; cannot be changed later
         * @param octaveMultiplier used to adjust the level of detail, with 0.5f at the bare-minimum detail and 1f normal
         */
        public RotatingSpaceMap(long initialSeed, int mapWidth, int mapHeight, float octaveMultiplier) {
            this(initialSeed, mapWidth, mapHeight, DEFAULT_NOISE, octaveMultiplier);
        }

        /**
         * Constructs a concrete WorldMapGenerator for a map that can be used to view a spherical world from space,
         * showing only one hemisphere at a time.
         * Takes an initial seed and the width/height of the map. The {@code initialSeed}
         * parameter may or may not be used, since you can specify the seed to use when you call {@link #generate(long, long)}.
         * The width and height of the map cannot be changed after the fact, but you can zoom in.
         * Uses the given noise generator, with 1f as the octave multiplier affecting detail.
         *
         * @param initialSeed the seed for the LaserRandom this uses; this may also be set per-call to generate
         * @param mapWidth    the width of the map(s) to generate; cannot be changed later
         * @param mapHeight   the height of the map(s) to generate; cannot be changed later
         * @param noiseGenerator an instance of a noise generator capable of 3D noise, usually {@link Noise}
         */
        public RotatingSpaceMap(long initialSeed, int mapWidth, int mapHeight, Noise noiseGenerator) {
            this(initialSeed, mapWidth, mapHeight, noiseGenerator, 1f);
        }

        /**
         * Constructs a concrete WorldMapGenerator for a map that can be used to view a spherical world from space,
         * showing only one hemisphere at a time.
         * Takes an initial seed, the width/height of the map, and parameters for noise
         * generation (a {@link Noise} implementation, which is usually {@link Noise#instance}, and a
         * multiplier on how many octaves of noise to use, with 1f being normal (high) detail and higher multipliers
         * producing even more detailed noise when zoomed-in). The {@code initialSeed} parameter may or may not be used,
         * since you can specify the seed to use when you call {@link #generate(long, long)}. The width and height of the map
         * cannot be changed after the fact, but you can zoom in. Noise will be the fastest 3D generator to use for
         * {@code noiseGenerator}, and the seed it's constructed with doesn't matter because this will change the
         * seed several times at different scales of noise (it's fine to use the static {@link Noise#instance}
         * because it has no changing state between runs of the program). The {@code octaveMultiplier} parameter should
         * probably be no lower than 0.5f, but can be arbitrarily high if you're willing to spend much more time on
         * generating detail only noticeable at very high zoom; normally 1f is fine and may even be too high for maps
         * that don't require zooming.
         * @param initialSeed the seed for the LaserRandom this uses; this may also be set per-call to generate
         * @param mapWidth the width of the map(s) to generate; cannot be changed later
         * @param mapHeight the height of the map(s) to generate; cannot be changed later
         * @param noiseGenerator an instance of a noise generator capable of 3D noise, usually {@link Noise}
         * @param octaveMultiplier used to adjust the level of detail, with 0.5f at the bare-minimum detail and 1f normal
         */
        public RotatingSpaceMap(long initialSeed, int mapWidth, int mapHeight, Noise noiseGenerator, float octaveMultiplier) {
            super(initialSeed, mapWidth, mapHeight);
            xPositions = new float[mapWidth][mapHeight];
            yPositions = new float[mapWidth][mapHeight];
            zPositions = new float[mapWidth][mapHeight];
            edges = new int[height << 1];
            storedMap = new StretchWorldMap(initialSeed, mapWidth << 1, mapHeight, noiseGenerator, octaveMultiplier);
        }

        /**
         * Copies the RotatingSpaceMap {@code other} to construct a new one that is exactly the same. References will only
         * be shared to Noise classes.
         * @param other a RotatingSpaceMap to copy
         */
        public RotatingSpaceMap(RotatingSpaceMap other)
        {
            super(other);
            minHeat0 = other.minHeat0;
            maxHeat0 = other.maxHeat0;
            minHeat1 = other.minHeat1;
            maxHeat1 = other.maxHeat1;
            minWet0 = other.minWet0;
            maxWet0 = other.maxWet0;
            xPositions = ArrayTools.copy(other.xPositions);
            yPositions = ArrayTools.copy(other.yPositions);
            zPositions = ArrayTools.copy(other.zPositions);
            edges = Arrays.copyOf(other.edges, other.edges.length);
            storedMap = new StretchWorldMap(other.storedMap);
        }


        @Override
        public int wrapX(int x, int y) {
            y = Math.max(0, Math.min(y, height - 1));
            return Math.max(edges[y << 1], Math.min(x, edges[y << 1 | 1]));
        }

        @Override
        public int wrapY(final int x, final int y)  {
            return Math.max(0, Math.min(y, height - 1));
        }

        @Override
        public void setCenterLongitude(float centerLongitude) {
            super.setCenterLongitude(centerLongitude);
            int ax, ay;
            float
                    ps, pc,
                    qs, qc,
                    h, yPos, xPos, iyPos, ixPos,
                    i_uw = usedWidth / (float)width,
                    i_uh = usedHeight / (float)height,
                    th, lon, lat, rho,
                    i_pi = 1f / TrigTools.PI,
                    rx = width * 0.5f, irx = i_uw / rx,
                    ry = height * 0.5f, iry = i_uh / ry;

            yPos = startY - ry;
            iyPos = yPos / ry;
            for (int y = 0; y < height; y++, yPos += i_uh, iyPos += iry) {
                boolean inSpace = true;
                xPos = startX - rx;
                ixPos = xPos / rx;
                lat = TrigTools.asin(iyPos);
                for (int x = 0; x < width; x++, xPos += i_uw, ixPos += irx) {
                    rho = (ixPos * ixPos + iyPos * iyPos);
                    if(rho > 1f) {
                        heightCodeData[x][y] = 1000;
                        inSpace = true;
                        continue;
                    }
                    rho = (float) Math.sqrt(rho);
                    if(inSpace)
                    {
                        inSpace = false;
                        edges[y << 1] = x;
                    }
                    edges[y << 1 | 1] = x;
                    th = TrigTools.asin(rho); // c
                    lon = removeExcess((centerLongitude + (TrigTools.atan2(ixPos * rho, rho * TrigTools.cos(th)))) * 0.5f);

                    qs = lat * 0.6366197723675814f;
                    qc = qs + 1f;
                    int sf = (qs >= 0f ? (int) qs : (int) qs - 1) & -2;
                    int cf = (qc >= 0f ? (int) qc : (int) qc - 1) & -2;
                    qs -= sf;
                    qc -= cf;
                    qs *= 2f - qs;
                    qc *= 2f - qc;
                    qs = qs * (-0.775f - 0.225f * qs) * ((sf & 2) - 1);
                    qc = qc * (-0.775f - 0.225f * qc) * ((cf & 2) - 1);


                    ps = lon * 0.6366197723675814f;
                    pc = ps + 1f;
                    sf = (ps >= 0f ? (int) ps : (int) ps - 1) & -2;
                    cf = (pc >= 0f ? (int) pc : (int) pc - 1) & -2;
                    ps -= sf;
                    pc -= cf;
                    ps *= 2f - ps;
                    pc *= 2f - pc;
                    ps = ps * (-0.775f - 0.225f * ps) * ((sf & 2) - 1);
                    pc = pc * (-0.775f - 0.225f * pc) * ((cf & 2) - 1);

                    ax = (int)((lon * i_pi + 1f) * width);
                    ay = (int)((qs + 1f) * ry);

//                    // Hammer projection, not an inverse projection like we usually use
//                    z = 1f / Math.sqrt(1 + qc * TrigTools.cos(lon * 0.5f));
//                    ax = (int)((qc * TrigTools.sin(lon * 0.5f) * z + 1f) * width);
//                    ay = (int)((qs * z + 1f) * height * 0.5f);

                    if(ax >= storedMap.width || ax < 0 || ay >= storedMap.height || ay < 0)
                    {
                        heightCodeData[x][y] = 1000;
                        continue;
                    }
                    if(storedMap.heightCodeData[ax][ay] >= 1000) // for the seam we get when looping around
                    {
                        ay = storedMap.wrapY(ax, ay);
                        ax = storedMap.wrapX(ax, ay);
                    }

                    xPositions[x][y] = pc * qc;
                    yPositions[x][y] = ps * qc;
                    zPositions[x][y] = qs;

                    heightData[x][y] = h = storedMap.heightData[ax][ay];
                    heightCodeData[x][y] = codeHeight(h);
                    heatData[x][y] = storedMap.heatData[ax][ay];
                    moistureData[x][y] = storedMap.moistureData[ax][ay];

                    minHeightActual = Math.min(minHeightActual, h);
                    maxHeightActual = Math.max(maxHeightActual, h);
                }
                minHeightActual = Math.min(minHeightActual, minHeight);
                maxHeightActual = Math.max(maxHeightActual, maxHeight);
            }

        }

        protected void regenerate(int startX, int startY, int usedWidth, int usedHeight,
                                  float landMod, float heatMod, long stateA, long stateB)
        {
            if(cacheA != stateA || cacheB != stateB)// || landMod != storedMap.landModifier || coolMod != storedMap.coolingModifier)
            {
                storedMap.regenerate(0, 0, width << 1, height, landMod, heatMod, stateA, stateB);
                minHeightActual = Float.POSITIVE_INFINITY;
                maxHeightActual = Float.NEGATIVE_INFINITY;

                minHeight = storedMap.minHeight;
                maxHeight = storedMap.maxHeight;

                minHeat0 = storedMap.minHeat0;
                maxHeat0 = storedMap.maxHeat0;

                minHeat1 = storedMap.minHeat1;
                maxHeat1 = storedMap.maxHeat1;

                minWet0 = storedMap.minWet0;
                maxWet0 = storedMap.maxWet0;

                minHeat = storedMap.minHeat;
                maxHeat = storedMap.maxHeat;

                minWet = storedMap.minWet;
                maxWet = storedMap.maxWet;

                cacheA = stateA;
                cacheB = stateB;
            }
            setCenterLongitude(centerLongitude);
            landData.refill(heightCodeData, 4, 999);
        }
    }
    /**
     * A concrete implementation of {@link WorldMapGenerator} that does no projection of the map, as if the area were
     * completely flat or small enough that curvature is impossible to see. This also does not change heat levels at the
     * far north and south regions of the map, since it is meant for areas that are all about the same heat level.
     * <a href="http://yellowstonegames.github.io/SquidLib/LocalMap.png" >Example map, showing lack of polar ice</a>
     */
    public static class LocalMap extends WorldMapGenerator {
        private static final long serialVersionUID = 1L;
        protected static final float terrainFreq = 1.45f, terrainLayeredFreq = 2.6f, heatFreq = 2.1f, moistureFreq = 2.125f, otherFreq = 3.375f;
        protected float minHeat0 = Float.POSITIVE_INFINITY, maxHeat0 = Float.NEGATIVE_INFINITY,
                minHeat1 = Float.POSITIVE_INFINITY, maxHeat1 = Float.NEGATIVE_INFINITY,
                minWet0 = Float.POSITIVE_INFINITY, maxWet0 = Float.NEGATIVE_INFINITY;

        public final Noise terrain, otherRidged, heat, moisture, terrainLayered;
        public final float[][] xPositions,
                yPositions,
                zPositions;


        /**
         * Constructs a concrete WorldMapGenerator for a map that can be used to wrap a sphere (as with a texture on a
         * 3D model), with seamless east-west wrapping, no north-south wrapping, and distortion that causes the poles to
         * have significantly-exaggerated-in-size features while the equator is not distorted.
         * Always makes a 256x128 map.
         * Uses Noise as its noise generator, with 1f as the octave multiplier affecting detail.
         * If you were using {@link LocalMap#LocalMap(long, int, int, Noise, float)}, then this would be the
         * same as passing the parameters {@code 0x1337BABE1337D00DL, 256, 128, DEFAULT_NOISE, 1f}.
         */
        public LocalMap() {
            this(0x1337BABE1337D00DL, 256, 128, DEFAULT_NOISE, 1f);
        }

        /**
         * Constructs a concrete WorldMapGenerator for a map that can be used to wrap a sphere (as with a texture on a
         * 3D model), with seamless east-west wrapping, no north-south wrapping, and distortion that causes the poles to
         * have significantly-exaggerated-in-size features while the equator is not distorted.
         * Takes only the width/height of the map. The initial seed is set to the same large long
         * every time, and it's likely that you would set the seed when you call {@link #generate(long, long)}. The width and
         * height of the map cannot be changed after the fact, but you can zoom in.
         * Uses Noise as its noise generator, with 1f as the octave multiplier affecting detail.
         *
         * @param mapWidth  the width of the map(s) to generate; cannot be changed later
         * @param mapHeight the height of the map(s) to generate; cannot be changed later
         */
        public LocalMap(int mapWidth, int mapHeight) {
            this(0x1337BABE1337D00DL, mapWidth, mapHeight,  DEFAULT_NOISE,1f);
        }

        /**
         * Constructs a concrete WorldMapGenerator for a map that can be used to wrap a sphere (as with a texture on a
         * 3D model), with seamless east-west wrapping, no north-south wrapping, and distortion that causes the poles to
         * have significantly-exaggerated-in-size features while the equator is not distorted.
         * Takes an initial seed and the width/height of the map. The {@code initialSeed}
         * parameter may or may not be used, since you can specify the seed to use when you call {@link #generate(long, long)}.
         * The width and height of the map cannot be changed after the fact, but you can zoom in.
         * Uses Noise as its noise generator, with 1f as the octave multiplier affecting detail.
         *
         * @param initialSeed the seed for the LaserRandom this uses; this may also be set per-call to generate
         * @param mapWidth    the width of the map(s) to generate; cannot be changed later
         * @param mapHeight   the height of the map(s) to generate; cannot be changed later
         */
        public LocalMap(long initialSeed, int mapWidth, int mapHeight) {
            this(initialSeed, mapWidth, mapHeight, DEFAULT_NOISE, 1f);
        }

        /**
         * Constructs a concrete WorldMapGenerator for a map that can be used to wrap a sphere (as with a texture on a
         * 3D model), with seamless east-west wrapping, no north-south wrapping, and distortion that causes the poles to
         * have significantly-exaggerated-in-size features while the equator is not distorted.
         * Takes an initial seed and the width/height of the map. The {@code initialSeed}
         * parameter may or may not be used, since you can specify the seed to use when you call {@link #generate(long, long)}.
         * The width and height of the map cannot be changed after the fact, but you can zoom in.
         * Uses Noise as its noise generator, with the given octave multiplier affecting detail.
         *
         * @param initialSeed the seed for the LaserRandom this uses; this may also be set per-call to generate
         * @param mapWidth    the width of the map(s) to generate; cannot be changed later
         * @param mapHeight   the height of the map(s) to generate; cannot be changed later
         * @param octaveMultiplier used to adjust the level of detail, with 0.5f at the bare-minimum detail and 1f normal
         */
        public LocalMap(long initialSeed, int mapWidth, int mapHeight, float octaveMultiplier) {
            this(initialSeed, mapWidth, mapHeight, DEFAULT_NOISE, octaveMultiplier);
        }

        /**
         * Constructs a concrete WorldMapGenerator for a map that can be used to wrap a sphere (as with a texture on a
         * 3D model), with seamless east-west wrapping, no north-south wrapping, and distortion that causes the poles to
         * have significantly-exaggerated-in-size features while the equator is not distorted.
         * Takes an initial seed and the width/height of the map. The {@code initialSeed}
         * parameter may or may not be used, since you can specify the seed to use when you call {@link #generate(long, long)}.
         * The width and height of the map cannot be changed after the fact, but you can zoom in.
         * Uses the given noise generator, with 1f as the octave multiplier affecting detail.
         *
         * @param initialSeed the seed for the LaserRandom this uses; this may also be set per-call to generate
         * @param mapWidth    the width of the map(s) to generate; cannot be changed later
         * @param mapHeight   the height of the map(s) to generate; cannot be changed later
         * @param noiseGenerator an instance of a noise generator capable of 3D noise, usually {@link Noise}
         */
        public LocalMap(long initialSeed, int mapWidth, int mapHeight, Noise noiseGenerator) {
            this(initialSeed, mapWidth, mapHeight, noiseGenerator, 1f);
        }

        /**
         * Constructs a concrete WorldMapGenerator for a map that can be used to wrap a sphere (as with a texture on a
         * 3D model), with seamless east-west wrapping, no north-south wrapping, and distortion that causes the poles to
         * have significantly-exaggerated-in-size features while the equator is not distorted.
         * Takes an initial seed, the width/height of the map, and parameters for noise
         * generation (a {@link Noise} implementation, which is usually {@link Noise#instance}, and a
         * multiplier on how many octaves of noise to use, with 1f being normal (high) detail and higher multipliers
         * producing even more detailed noise when zoomed-in). The {@code initialSeed} parameter may or may not be used,
         * since you can specify the seed to use when you call {@link #generate(long, long)}. The width and height of the map
         * cannot be changed after the fact, but you can zoom in. Noise will be the fastest 3D generator to use for
         * {@code noiseGenerator}, and the seed it's constructed with doesn't matter because this will change the
         * seed several times at different scales of noise (it's fine to use the static {@link Noise#instance}
         * because it has no changing state between runs of the program). The {@code octaveMultiplier} parameter should
         * probably be no lower than 0.5f, but can be arbitrarily high if you're willing to spend much more time on
         * generating detail only noticeable at very high zoom; normally 1f is fine and may even be too high for maps
         * that don't require zooming.
         * @param initialSeed the seed for the LaserRandom this uses; this may also be set per-call to generate
         * @param mapWidth the width of the map(s) to generate; cannot be changed later
         * @param mapHeight the height of the map(s) to generate; cannot be changed later
         * @param noiseGenerator an instance of a noise generator capable of 3D noise, usually {@link Noise#instance}
         * @param octaveMultiplier used to adjust the level of detail, with 0.5f at the bare-minimum detail and 1f normal
         */
        public LocalMap(long initialSeed, int mapWidth, int mapHeight, Noise noiseGenerator, float octaveMultiplier) {
            super(initialSeed, mapWidth, mapHeight);
            xPositions = new float[width][height];
            yPositions = new float[width][height];
            zPositions = new float[width][height];


            terrain = new Noise(noiseGenerator); terrain.setFrequency(terrain.getFrequency() * terrainFreq);
            terrain.setNoiseType(terrain.getNoiseType() | 1); terrain.setFractalOctaves((int)(0.5f + octaveMultiplier * 10));
            terrain.setFractalType(Noise.RIDGED_MULTI);

            terrainLayered = new Noise(noiseGenerator); terrainLayered.setFrequency(terrainLayered.getFrequency() * terrainLayeredFreq * 0.325f);
            terrainLayered.setNoiseType(terrainLayered.getNoiseType() | 1); terrainLayered.setFractalOctaves((int)(0.5f + octaveMultiplier * 8));

            heat = new Noise(noiseGenerator); heat.setFrequency(heat.getFrequency() * heatFreq);
            heat.setNoiseType(heat.getNoiseType() | 1); heat.setFractalOctaves((int)(0.5f + octaveMultiplier * 3));

            moisture = new Noise(noiseGenerator); moisture.setFrequency(moisture.getFrequency() * moistureFreq);
            moisture.setNoiseType(moisture.getNoiseType() | 1); moisture.setFractalOctaves((int)(0.5f + octaveMultiplier * 4));

            otherRidged = new Noise(noiseGenerator); otherRidged.setFrequency(otherRidged.getFrequency() * otherFreq);
            otherRidged.setNoiseType(otherRidged.getNoiseType() | 1); otherRidged.setFractalOctaves((int)(0.5f + octaveMultiplier * 6));
            otherRidged.setFractalType(Noise.RIDGED_MULTI);
        }

        /**
         * Copies the LocalMap {@code other} to construct a new one that is exactly the same. References will only
         * be shared to Noise classes.
         * @param other a LocalMap to copy
         */
        public LocalMap(LocalMap other)
        {
            super(other);
            terrain = other.terrain;
            terrainLayered = other.terrainLayered;
            heat = other.heat;
            moisture = other.moisture;
            otherRidged = other.otherRidged;
            minHeat0 = other.minHeat0;
            maxHeat0 = other.maxHeat0;
            minHeat1 = other.minHeat1;
            maxHeat1 = other.maxHeat1;
            minWet0 = other.minWet0;
            maxWet0 = other.maxWet0;
            xPositions = ArrayTools.copy(other.xPositions);
            yPositions = ArrayTools.copy(other.yPositions);
            zPositions = ArrayTools.copy(other.zPositions);
        }

        @Override
        public int wrapX(final int x, final int y)  {
            return Math.max(0, Math.min(x, width - 1));
        }

        @Override
        public int wrapY(final int x, final int y)  {
            return Math.max(0, Math.min(y, height - 1));
        }

        protected void regenerate(int startX, int startY, int usedWidth, int usedHeight,
                                  float landMod, float heatMod, long stateA, long stateB)
        {
            boolean fresh = false;
            if(cacheA != stateA || cacheB != stateB || landMod != landModifier || heatMod != heatModifier)
            {
                minHeight = Float.POSITIVE_INFINITY;
                maxHeight = Float.NEGATIVE_INFINITY;
                minHeat0 = Float.POSITIVE_INFINITY;
                maxHeat0 = Float.NEGATIVE_INFINITY;
                minHeat1 = Float.POSITIVE_INFINITY;
                maxHeat1 = Float.NEGATIVE_INFINITY;
                minHeat = Float.POSITIVE_INFINITY;
                maxHeat = Float.NEGATIVE_INFINITY;
                minWet0 = Float.POSITIVE_INFINITY;
                maxWet0 = Float.NEGATIVE_INFINITY;
                minWet = Float.POSITIVE_INFINITY;
                maxWet = Float.NEGATIVE_INFINITY;
                cacheA = stateA;
                cacheB = stateB;
                fresh = true;
            }
            rng.setState(stateA, stateB);
            long seedA = rng.nextLong(), seedB = rng.nextLong(), seedC = rng.nextLong();
            int t;

            landModifier = (landMod <= 0) ? rng.nextFloat(0.29f) + 0.91f : landMod;
            heatModifier = (heatMod <= 0) ? rng.nextFloat(0.45f) * (rng.nextFloat()-0.5f) + 1.1f : heatMod;

            float p,
                    ps, pc,
                    qs, qc,
                    h, temp,
                    i_w = 1f / width, i_h = 1f / (height),  ii = Math.max(i_w, i_h),
                    i_uw = usedWidth * i_w * ii, i_uh = usedHeight * i_h * ii, xPos, yPos = startY * i_h;
            for (int y = 0; y < height; y++, yPos += i_uh) {
                xPos = startX * i_w;
                for (int x = 0; x < width; x++, xPos += i_uw) {
                    xPositions[x][y] = xPos;
                    yPositions[x][y] = yPos;
                    zPositions[x][y] = 0f;
                    heightData[x][y] = (h = terrainLayered.getNoiseWithSeed(xPos +
                                    terrain.getNoiseWithSeed(xPos, yPos, seedB - seedA) * 0.5f,
                            yPos, seedA) + landModifier - 1f);
                    heatData[x][y] = (p = heat.getNoiseWithSeed(xPos, yPos
                                    + 0.375f * otherRidged.getNoiseWithSeed(xPos, yPos, seedB + seedC),
                            seedB));
                    temp = 0.375f * otherRidged.getNoiseWithSeed(xPos, yPos, seedC + seedA);
                    moistureData[x][y] = (temp = moisture.getNoiseWithSeed(xPos - temp, yPos + temp, seedC));

                    minHeightActual = Math.min(minHeightActual, h);
                    maxHeightActual = Math.max(maxHeightActual, h);
                    if(fresh) {
                        minHeight = Math.min(minHeight, h);
                        maxHeight = Math.max(maxHeight, h);

                        minHeat0 = Math.min(minHeat0, p);
                        maxHeat0 = Math.max(maxHeat0, p);

                        minWet0 = Math.min(minWet0, temp);
                        maxWet0 = Math.max(maxWet0, temp);
                    }
                }
                minHeightActual = Math.min(minHeightActual, minHeight);
                maxHeightActual = Math.max(maxHeightActual, maxHeight);

            }
            float  heatDiff = 0.8f / (maxHeat0 - minHeat0),
                    wetDiff = 1f / (maxWet0 - minWet0),
                    hMod;
            yPos = startY * i_h + i_uh;
            ps = Float.POSITIVE_INFINITY;
            pc = Float.NEGATIVE_INFINITY;

            for (int y = 0; y < height; y++, yPos += i_uh) {
                for (int x = 0; x < width; x++) {
                    h = heightData[x][y];
                    heightCodeData[x][y] = (t = codeHeight(h));
                    hMod = 1f;
                    switch (t) {
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            h = 0.4f;
                            hMod = 0.2f;
                            break;
                        case 6:
                            h = -0.1f * (h - forestLower - 0.08f);
                            break;
                        case 7:
                            h *= -0.25f;
                            break;
                        case 8:
                            h *= -0.4f;
                            break;
                        default:
                            h *= 0.05f;
                    }
                    heatData[x][y] = (h = ((heatData[x][y] - minHeat0) * heatDiff * hMod) + h + 0.6f);
                    if (fresh) {
                        ps = Math.min(ps, h); //minHeat0
                        pc = Math.max(pc, h); //maxHeat0
                    }
                }
            }
            if(fresh)
            {
                minHeat1 = ps;
                maxHeat1 = pc;
            }
            heatDiff = heatModifier / (maxHeat1 - minHeat1);
            qs = Float.POSITIVE_INFINITY;
            qc = Float.NEGATIVE_INFINITY;
            ps = Float.POSITIVE_INFINITY;
            pc = Float.NEGATIVE_INFINITY;


            for (int y = 0; y < height; y++) {
                for (int x = 0; x < width; x++) {
                    heatData[x][y] = (h = ((heatData[x][y] - minHeat1) * heatDiff));
                    moistureData[x][y] = (temp = (moistureData[x][y] - minWet0) * wetDiff);
                    if (fresh) {
                        qs = Math.min(qs, h);
                        qc = Math.max(qc, h);
                        ps = Math.min(ps, temp);
                        pc = Math.max(pc, temp);
                    }
                }
            }
            if(fresh)
            {
                minHeat = qs;
                maxHeat = qc;
                minWet = ps;
                maxWet = pc;
            }
            landData.refill(heightCodeData, 4, 999);
        }
    }
    /**
     * An unusual map generator that imitates an existing local map (such as a map of Australia, which it can do by
     * default), without applying any projection or changing heat levels in the polar regions or equator.
     * <a href="http://yellowstonegames.github.io/SquidLib/LocalMimicWorldMap.png" >Example map, showing a variant on Australia</a>
     */
    public static class LocalMimicWorldMap extends LocalMap
    {
        private static final long serialVersionUID = 1L;
        public Region earth;
        public Region shallow;
        public Region coast;
        public Region earthOriginal;
        /**
         * Constructs a concrete WorldMapGenerator for a map that should look like Australia, without projecting the
         * land positions or changing heat by latitude. Always makes a 256x256 map.
         * Uses Noise as its noise generator, with 1f as the octave multiplier affecting detail.
         * If you were using {@link LocalMimicWorldMap#LocalMimicWorldMap(long, Noise, float)}, then this would be the
         * same as passing the parameters {@code 0x1337BABE1337D00DL, DEFAULT_NOISE, 1f}.
         */
        public LocalMimicWorldMap() {
            this(0x1337BABE1337D00DL
                    , DEFAULT_NOISE, 1f);
        }

        /**
         * Constructs a concrete WorldMapGenerator for a map that should have land in roughly the same places as the
         * given Region's "on" cells, without projecting the land positions or changing heat by latitude.
         * The initial seed is set to the same large long every time, and it's likely that you would set the seed when
         * you call {@link #generate(long, long)}. The width and height of the map cannot be changed after the fact.
         * Uses Noise as its noise generator, with 1f as the octave multiplier affecting detail.
         *
         * @param toMimic the world map to imitate, as a Region with land as "on"; the height and width will be copied
         */
        public LocalMimicWorldMap(Region toMimic) {
            this(0x1337BABE1337D00DL, toMimic,  DEFAULT_NOISE,1f);
        }

        /**
         * Constructs a concrete WorldMapGenerator for a map that should have land in roughly the same places as the
         * given Region's "on" cells, without projecting the land positions or changing heat by latitude.
         * Takes an initial seed and the Region containing land positions. The {@code initialSeed}
         * parameter may or may not be used, since you can specify the seed to use when you call {@link #generate(long, long)}.
         * The width and height of the map cannot be changed after the fact.
         * Uses Noise as its noise generator, with 1f as the octave multiplier affecting detail.
         *
         * @param initialSeed the seed for the LaserRandom this uses; this may also be set per-call to generate
         * @param toMimic the world map to imitate, as a Region with land as "on"; the height and width will be copied
         */
        public LocalMimicWorldMap(long initialSeed, Region toMimic) {
            this(initialSeed, toMimic, DEFAULT_NOISE, 1f);
        }

        /**
         * Constructs a concrete WorldMapGenerator for a map that should have land in roughly the same places as the
         * given Region's "on" cells, without projecting the land positions or changing heat by latitude.
         * Takes an initial seed, the Region containing land positions, and a multiplier that affects the level
         * of detail by increasing or decreasing the number of octaves of noise used. The {@code initialSeed}
         * parameter may or may not be used, since you can specify the seed to use when you call {@link #generate(long, long)}.
         * The width and height of the map cannot be changed after the fact.
         * Uses Noise as its noise generator, with the given octave multiplier affecting detail.
         *
         * @param initialSeed the seed for the LaserRandom this uses; this may also be set per-call to generate
         * @param toMimic the world map to imitate, as a Region with land as "on"; the height and width will be copied
         * @param octaveMultiplier used to adjust the level of detail, with 0.5f at the bare-minimum detail and 1f normal
         */
        public LocalMimicWorldMap(long initialSeed, Region toMimic, float octaveMultiplier) {
            this(initialSeed, toMimic, DEFAULT_NOISE, octaveMultiplier);
        }

        /**
         * Constructs a concrete WorldMapGenerator for a map that should have land in roughly the same places as the
         * given Region's "on" cells, without projecting the land positions or changing heat by latitude.
         * Takes an initial seed, the Region containing land positions, and parameters for noise generation (a
         * {@link Noise} implementation, which is usually {@link Noise#instance}. The {@code initialSeed}
         * parameter may or may not be used, since you can specify the seed to use when you call
         * {@link #generate(long, long)}. The width and height of the map cannot be changed after the fact. Both Noise
         * and Noise make sense to use for {@code noiseGenerator}, and the seed it's constructed with doesn't matter
         * because this will change the seed several times at different scales of noise (it's fine to use the static
         * {@link Noise#instance} or {@link Noise#instance} because they have no changing state between runs
         * of the program). Uses the given noise generator, with 1f as the octave multiplier affecting detail.
         *
         * @param initialSeed the seed for the LaserRandom this uses; this may also be set per-call to generate
         * @param toMimic the world map to imitate, as a Region with land as "on"; the height and width will be copied
         * @param noiseGenerator an instance of a noise generator capable of 3D noise, usually {@link Noise} or {@link Noise}
         */
        public LocalMimicWorldMap(long initialSeed, Region toMimic, Noise noiseGenerator) {
            this(initialSeed, toMimic, noiseGenerator, 1f);
        }

        /**
         * Constructs a concrete WorldMapGenerator for a map that should have land in roughly the same places as the
         * given Region's "on" cells, using an elliptical projection (specifically, a Mollweide projection).
         * Takes an initial seed, the Region containing land positions, parameters for noise generation (a
         * {@link Noise} implementation, which is usually {@link Noise#instance}, and a multiplier on how many
         * octaves of noise to use, with 1f being normal (high) detail and higher multipliers producing even more
         * detailed noise when zoomed-in). The {@code initialSeed} parameter may or may not be used,
         * since you can specify the seed to use when you call {@link #generate(long, long)}. The width and height of the map
         * cannot be changed after the fact.  Noise will be the fastest 3D generator to use for
         * {@code noiseGenerator}, and the seed it's constructed with doesn't matter because this will change the
         * seed several times at different scales of noise (it's fine to use the static {@link Noise#instance}
         * because it has no changing state between runs of the program). The {@code octaveMultiplier} parameter should
         * probably be no lower than 0.5f, but can be arbitrarily high if you're willing to spend much more time on
         * generating detail only noticeable at very high zoom; normally 1f is fine and may even be too high for maps
         * that don't require zooming.
         * @param initialSeed the seed for the LaserRandom this uses; this may also be set per-call to generate
         * @param toMimic the world map to imitate, as a Region with land as "on"; the height and width will be copied
         * @param noiseGenerator an instance of a noise generator capable of 3D noise, usually {@link Noise} or {@link Noise}
         * @param octaveMultiplier used to adjust the level of detail, with 0.5f at the bare-minimum detail and 1f normal
         */
        public LocalMimicWorldMap(long initialSeed, Region toMimic, Noise noiseGenerator, float octaveMultiplier) {
            super(initialSeed, toMimic.width, toMimic.height, noiseGenerator, octaveMultiplier);
            earth = toMimic;
            earthOriginal = earth.copy();
            coast   = earth.copy().not().fringe(2);
            shallow = earth.copy().fringe(2);
        }
        /**
         * Stores a 256x256 Region that shows an unprojected map of Australia, in a format that can be read back
         * with {@link Region#decompress(String)}. By using Region's compression, this takes up a lot less
         * room than it would with most text-based formats, and even beats uncompressed binary storage of the map by a
         * factor of 9.4f. The map data won't change here, so this should stay compatible.
         */
        public static final String AUSTRALIA_ENCODED = "Ƥ䒅⒐᮰囨䈢ħ䐤࠰ࠨ•Ⱙအ䎢ŘňÆ䴣ȢؤF䭠゠ᔤ∠偰ഀ\u0560₠ኼܨā᭮笁\u242AЦᇅ扰रࠦ吠䠪ࠦ䠧娮⠬䠬❁Ềក\u1CAA͠敠ἒ慽Ê䄄洡儠䋻䨡㈠䙬坈མŨྈ䞻䛊哚晪⁞倰h·䡂Ļæ抂㴢္\u082E搧䈠ᇩᒠ᩠ɀ༨ʨڤʃ奲ࢠ፠ᆙả䝆䮳りĩ(ॠી᧰྄e॑ᤙ䒠剠⁌ဥࠩФΝ䂂⢴ᑠ㺀ᢣ䗨dBqÚ扜冢\u0FE5\u0A62䐠劣ေ¯䂍䞀ၰ\u0E67ᐓ〈ᄠ塠Ѡ̀ာ⠤ᡤŒęጓ憒‱〿䌳℔ᐼ䊢⁚䤿ӣ◚㙀\u0C74Ӹ抠⣀ĨǊǸ䁃း₺Ý䂁ᜤ䢑V⁄樫焠\u0A60\u2E78⎲Ĉ䁎勯戡璠悈ᠥ嘡⩩‰ನ檨㡕䶪၁@恑ࠣ䘣ࢠᅀᡎ劰桠Өॢಸ熛փࢸ䀹ఽ䅠勖ਰ۴̄ጺಢ䈠ᙠᨭ\u2FE0焠Ӡܼ䇂䒠ᯀԨĠ愜᪅䦥㶐ୀ\u09C5Ƣ*䂕ॹ∠咠р\u0604У無~⁆Г椠痠\u1CA9Ⱓס㩖ᝋ司楠२ญⳘ䬣汤ǿã㱩ᖷ掠Àݒ㑁c‾䮴,\u2452僢ᰣ缠ɋ乨\u0378䁡绑ס傓䁔瀾ሺÑ䀤ो刡开烀\u0A76Ё䈠䈰״Áj⁑䠡戢碠㘀አ䃉㪙嘈ʂø⸪௰₈㐲暤ƩDᬿ䂖剙書\u0FE0㴢\u0089㘩Ĉ䰵掀栰杁4〡Ƞ⭀\u1AE0㠰㹨Zコത\u009E䂖ࠠⴠ縣吠ᆠʡ㡀䀧否䣝Ӧ愠Ⓚ\u1CA2ಠո*①ӈԥ獀խ@㟬箬㐱\u31BE簽Ɛᩆᇞ稯禚⟶⣑аβǚ㥎Ḇ⌢㑆 搡⁗ဣ刣\u0C45䑒8怺₵⤦a5ਵ㏰ᩄ猢ฦ䬞㐷䈠呠カ愠ۀ\u1C92傠ᅼ߃ᙊ䢨ၠླྀš亀ƴ̰刷ʼ墨愠  ";

        /**
         * Constructs a 256x256 unprojected local map that will use land forms with a similar shape to Australia.
         * @param initialSeed
         * @param noiseGenerator
         * @param octaveMultiplier
         */
        public LocalMimicWorldMap(long initialSeed, Noise noiseGenerator, float octaveMultiplier)
        {
            this(initialSeed,
                    Region.decompress(AUSTRALIA_ENCODED), noiseGenerator, octaveMultiplier);
        }

        /**
         * Copies the LocalMimicWorldMap {@code other} to construct a new one that is exactly the same. References will only
         * be shared to Noise classes.
         * @param other a LocalMimicWorldMap to copy
         */
        public LocalMimicWorldMap(LocalMimicWorldMap other)
        {
            super(other);
            earth = other.earth.copy();
            earthOriginal = other.earthOriginal.copy();
            coast   = other.coast.copy();
            shallow = other.shallow.copy();
        }



        protected void regenerate(int startX, int startY, int usedWidth, int usedHeight,
                                  float landMod, float heatMod, long stateA, long stateB)
        {
            boolean fresh = false;
            if(cacheA != stateA || cacheB != stateB || landMod != landModifier || heatMod != heatModifier)
            {
                minHeight = Float.POSITIVE_INFINITY;
                maxHeight = Float.NEGATIVE_INFINITY;
                minHeat0 = Float.POSITIVE_INFINITY;
                maxHeat0 = Float.NEGATIVE_INFINITY;
                minHeat1 = Float.POSITIVE_INFINITY;
                maxHeat1 = Float.NEGATIVE_INFINITY;
                minHeat = Float.POSITIVE_INFINITY;
                maxHeat = Float.NEGATIVE_INFINITY;
                minWet0 = Float.POSITIVE_INFINITY;
                maxWet0 = Float.NEGATIVE_INFINITY;
                minWet = Float.POSITIVE_INFINITY;
                maxWet = Float.NEGATIVE_INFINITY;
                cacheA = stateA;
                cacheB = stateB;
                fresh = true;
            }
            rng.setState(stateA, stateB);
            long seedA = rng.nextLong(), seedB = rng.nextLong(), seedC = rng.nextLong();
            int t;

            landModifier = (landMod <= 0) ? rng.nextFloat(0.29f) + 0.91f : landMod;
            heatModifier = (heatMod <= 0) ? rng.nextFloat(0.45f) * (rng.nextFloat()-0.5f) + 1.1f : heatMod;

            earth.remake(earthOriginal);

            if(zoom > 0)
            {
                int stx = Math.min(Math.max((zoomStartX - (width  >> 1)) / ((2 << zoom) - 2), 0), width ),
                        sty = Math.min(Math.max((zoomStartY - (height >> 1)) / ((2 << zoom) - 2), 0), height);
                for (int z = 0; z < zoom; z++) {
                    earth.zoom(stx, sty).expand8way().fray(0.5f).expand();
                }
                coast.remake(earth).not().fringe(2 << zoom).expand().fray(0.5f);
                shallow.remake(earth).fringe(2 << zoom).expand().fray(0.5f);
            }
            else
            {
                coast.remake(earth).not().fringe(2);
                shallow.remake(earth).fringe(2);
            }
            float p,
                    ps, pc,
                    qs, qc,
                    h, temp,
                    i_w = 1f / width, i_h = 1f / (height),
                    i_uw = usedWidth * i_w * i_w, i_uh = usedHeight * i_h * i_h, xPos, yPos = startY * i_h;
            for (int y = 0; y < height; y++, yPos += i_uh) {
                xPos = startX * i_w;
                for (int x = 0; x < width; x++, xPos += i_uw) {
                    xPositions[x][y] = (xPos - .5f) * 2f;
                    yPositions[x][y] = (yPos - .5f) * 2f;
                    zPositions[x][y] = 0f;

                    if(earth.contains(x, y))
                    {
                        h = MathTools.swayTight(terrainLayered.getNoiseWithSeed(xPos +
                                        terrain.getNoiseWithSeed(xPos, yPos, seedB - seedA) * 0.5f,
                                yPos, seedA)) * 0.85f;
                        if(coast.contains(x, y))
                            h += 0.05f;
                        else
                            h += 0.15f;
                    }
                    else
                    {
                        h = MathTools.swayTight(terrainLayered.getNoiseWithSeed(xPos +
                                        terrain.getNoiseWithSeed(xPos, yPos, seedB - seedA) * 0.5f,
                                yPos, seedA)) * -0.9f;
                        if(shallow.contains(x, y))
                            h = (h - 0.08f) * 0.375f;
                        else
                            h = (h - 0.125f) * 0.75f;
                    }
                    //h += landModifier - 1f;
                    heightData[x][y] = h;
                    heatData[x][y] = (p = heat.getNoiseWithSeed(xPos, yPos
                                    + 0.375f * otherRidged.getNoiseWithSeed(xPos, yPos, seedB + seedC),
                            seedB));
                    temp = 0.375f * otherRidged.getNoiseWithSeed(xPos, yPos, seedC + seedA);
                    moistureData[x][y] = (temp = moisture.getNoiseWithSeed(xPos - temp, yPos + temp, seedC));

                    minHeightActual = Math.min(minHeightActual, h);
                    maxHeightActual = Math.max(maxHeightActual, h);
                    if(fresh) {
                        minHeight = Math.min(minHeight, h);
                        maxHeight = Math.max(maxHeight, h);

                        minHeat0 = Math.min(minHeat0, p);
                        maxHeat0 = Math.max(maxHeat0, p);

                        minWet0 = Math.min(minWet0, temp);
                        maxWet0 = Math.max(maxWet0, temp);
                    }
                }
                minHeightActual = Math.min(minHeightActual, minHeight);
                maxHeightActual = Math.max(maxHeightActual, maxHeight);

            }
            float  heatDiff = 0.8f / (maxHeat0 - minHeat0),
                    wetDiff = 1f / (maxWet0 - minWet0),
                    hMod;
            yPos = startY * i_h + i_uh;
            ps = Float.POSITIVE_INFINITY;
            pc = Float.NEGATIVE_INFINITY;

            for (int y = 0; y < height; y++, yPos += i_uh) {
                for (int x = 0; x < width; x++) {
                    h = heightData[x][y];
                    heightCodeData[x][y] = (t = codeHeight(h));
                    hMod = 1f;
                    switch (t) {
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            h = 0.4f;
                            hMod = 0.2f;
                            break;
                        case 6:
                            h = -0.1f * (h - forestLower - 0.08f);
                            break;
                        case 7:
                            h *= -0.25f;
                            break;
                        case 8:
                            h *= -0.4f;
                            break;
                        default:
                            h *= 0.05f;
                    }
                    heatData[x][y] = (h = ((heatData[x][y] - minHeat0) * heatDiff * hMod) + h + 0.6f);
                    if (fresh) {
                        ps = Math.min(ps, h); //minHeat0
                        pc = Math.max(pc, h); //maxHeat0
                    }
                }
            }
            if(fresh)
            {
                minHeat1 = ps;
                maxHeat1 = pc;
            }
            heatDiff = heatModifier / (maxHeat1 - minHeat1);
            qs = Float.POSITIVE_INFINITY;
            qc = Float.NEGATIVE_INFINITY;
            ps = Float.POSITIVE_INFINITY;
            pc = Float.NEGATIVE_INFINITY;


            for (int y = 0; y < height; y++) {
                for (int x = 0; x < width; x++) {
                    heatData[x][y] = (h = ((heatData[x][y] - minHeat1) * heatDiff));
                    moistureData[x][y] = (temp = (moistureData[x][y] - minWet0) * wetDiff);
                    if (fresh) {
                        qs = Math.min(qs, h);
                        qc = Math.max(qc, h);
                        ps = Math.min(ps, temp);
                        pc = Math.max(pc, temp);
                    }
                }
            }
            if(fresh)
            {
                minHeat = qs;
                maxHeat = qc;
                minWet = ps;
                maxWet = pc;
            }
            landData.refill(heightCodeData, 4, 999);
        }
    }

}
