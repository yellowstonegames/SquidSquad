package com.github.yellowstonegames.core;

import com.github.tommyettinger.ds.support.EnhancedRandom;

import javax.annotation.Nonnull;
import java.util.Random;

/**
 * A variant on Java 8's SplittableRandom algorithm, removing the splittable quality so this has one possible stream.
 * You'd typically use this when you want every output of {@link #nextLong()} from one generator to be a different,
 * unique number until every {@code long} has been generated, such as for generating unique seeds or IDs. The reasons
 * for removing the splittable quality are a little complicated, but it's enough to say that by having a fixed stream,
 * this is a little faster, and it avoids the possibility of some streams being lower-quality. This uses Pelle Evensen's
 * <a href="https://mostlymangling.blogspot.com/2019/12/stronger-better-morer-moremur-better.html">Moremur mixer</a>
 * instead of SplittableRandom's Variant 13, which should have roughly equivalent performance but somewhat higher
 * statistical quality. Like many variations on SplittableRandom and its SplitMix64 algorithm, this changes its state
 * by a simple counter with a large increment; one of the best increments seems to be (2 to the 64) divided by the
 * golden ratio, plus or minus 1 to make it odd. This number, 0x9E3779B97F4A7C15L or -7046029254386353131L when stored
 * in a signed long, shows up a lot in random number generation and hashing fields because the golden ratio has some
 * unique and helpful properties.
 * <br>
 * Other useful traits of this generator are that it has exactly one {@code long} of state, that all values are
 * permitted for that state, and that you can {@link #skip(long)} the state forwards or backwards in constant time.
 * <br>
 * This is closely related to SquidLib 3.0.0's LightRNG and MoonwalkRNG classes, but doesn't produce the same output.
 * The squidold module has a version of LightRNG that is compatible with 3.0.0 in output. This class is both a
 * {@link Random} from the JDK and a {@link EnhancedRandom} from jdkgdxds, and can often be used as a substitute for
 * {@link com.github.tommyettinger.ds.support.LaserRandom}. LaserRandom has comparable speed, and supports many streams,
 * but if you want just one {@code long} of state, DistinctRandom is a better fit.
 */
public class DistinctRandom extends Random implements EnhancedRandom {

    public long state;

    /**
     * Creates a new DistinctRandom with a random state.
     */
    public DistinctRandom() {
        super();
        state = super.nextLong();
    }

    /**
     * Creates a new DistinctRandom with the given state; all {@code long} values are permitted.
     * @param state any {@code long} value
     */
    public DistinctRandom(long state) {
        this.state = state;
    }

    @Override
    public int getStateCount() {
        return 1;
    }

    @Override
    public long getSelectedState(int selection) {
        return state;
    }

    @Override
    public void setSelectedState(int selection, long value) {
        state = value;
    }

    @Override
    public void setSeed(long seed) {
        state = seed;
    }

    @Override
    public long nextLong() {
        long x = (state += 0x9E3779B97F4A7C15L);
        x ^= x >>> 27;
        x *= 0x3C79AC492BA7B653L;
        x ^= x >>> 33;
        x *= 0x1C69B3F74AC4AE35L;
        return x ^ x >>> 27;
    }

    /**
     * Skips the state forward or backwards by the given {@code advance}, then returns the result of {@link #nextLong()}
     * at the same point in the sequence. If advance is 1, this is equivalent to nextLong(). If advance is 0, this
     * returns the same {@code long} as the previous call to the generator (if it called nextLong()), and doesn't change
     * the state. If advance is -1, this moves the state backwards and produces the {@code long} before the last one
     * generated by nextLong(). More positive numbers move the state further ahead, and more negative numbers move the
     * state further behind; all of these take constant time.
     *
     * @param advance how many steps to advance the state before generating a {@code long}
     * @return a random {@code long} by the same algorithm as {@link #nextLong()}, using the appropriately-advanced state
     */
    @Override
    public long skip(long advance) {
        long x = (state += 0x9E3779B97F4A7C15L * advance);
        x ^= x >>> 27;
        x *= 0x3C79AC492BA7B653L;
        x ^= x >>> 33;
        x *= 0x1C69B3F74AC4AE35L;
        return x ^ x >>> 27;
    }

    @Override
    public int next(int bits) {
        long x = (state += 0x9E3779B97F4A7C15L);
        x ^= x >>> 27;
        x *= 0x3C79AC492BA7B653L;
        x ^= x >>> 33;
        x *= 0x1C69B3F74AC4AE35L;
        return (int) (x ^ x >>> 27) >>> (32 - bits);
    }

    @Nonnull
    @Override
    public DistinctRandom copy() {
        return new DistinctRandom(state);
    }


    @Override
    public void nextBytes(@Nonnull byte[] bytes) {
        EnhancedRandom.super.nextBytes(bytes);
    }

    @Override
    public int nextInt() {
        return EnhancedRandom.super.nextInt();
    }

    @Override
    public int nextInt(int bound) {
        return EnhancedRandom.super.nextInt(bound);
    }

    @Override
    public boolean nextBoolean() {
        return EnhancedRandom.super.nextBoolean();
    }

    @Override
    public float nextFloat() {
        return EnhancedRandom.super.nextFloat();
    }

    @Override
    public double nextDouble() {
        return EnhancedRandom.super.nextDouble();
    }

    @Override
    public double nextGaussian() {
        return EnhancedRandom.super.nextGaussian();
    }
}
